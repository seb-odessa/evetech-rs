/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCharactersCharacterIdContractsContractIdItems200Ok : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCharactersCharacterIdContractsContractIdItems200Ok {
  /// true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract
  #[serde(rename = "is_included")]
  is_included: bool,
  /// is_singleton boolean
  #[serde(rename = "is_singleton")]
  is_singleton: bool,
  /// Number of items in the stack
  #[serde(rename = "quantity")]
  quantity: i32,
  /// -1 indicates that the item is a singleton (non-stackable). If the item happens to be a Blueprint, -1 is an Original and -2 is a Blueprint Copy
  #[serde(rename = "raw_quantity")]
  raw_quantity: Option<i32>,
  /// Unique ID for the item
  #[serde(rename = "record_id")]
  record_id: i64,
  /// Type ID for item
  #[serde(rename = "type_id")]
  type_id: i32
}

impl GetCharactersCharacterIdContractsContractIdItems200Ok {
  /// 200 ok object
  pub fn new(is_included: bool, is_singleton: bool, quantity: i32, record_id: i64, type_id: i32) -> GetCharactersCharacterIdContractsContractIdItems200Ok {
    GetCharactersCharacterIdContractsContractIdItems200Ok {
      is_included: is_included,
      is_singleton: is_singleton,
      quantity: quantity,
      raw_quantity: None,
      record_id: record_id,
      type_id: type_id
    }
  }

  pub fn set_is_included(&mut self, is_included: bool) {
    self.is_included = is_included;
  }

  pub fn with_is_included(mut self, is_included: bool) -> GetCharactersCharacterIdContractsContractIdItems200Ok {
    self.is_included = is_included;
    self
  }

  pub fn is_included(&self) -> &bool {
    &self.is_included
  }


  pub fn set_is_singleton(&mut self, is_singleton: bool) {
    self.is_singleton = is_singleton;
  }

  pub fn with_is_singleton(mut self, is_singleton: bool) -> GetCharactersCharacterIdContractsContractIdItems200Ok {
    self.is_singleton = is_singleton;
    self
  }

  pub fn is_singleton(&self) -> &bool {
    &self.is_singleton
  }


  pub fn set_quantity(&mut self, quantity: i32) {
    self.quantity = quantity;
  }

  pub fn with_quantity(mut self, quantity: i32) -> GetCharactersCharacterIdContractsContractIdItems200Ok {
    self.quantity = quantity;
    self
  }

  pub fn quantity(&self) -> &i32 {
    &self.quantity
  }


  pub fn set_raw_quantity(&mut self, raw_quantity: i32) {
    self.raw_quantity = Some(raw_quantity);
  }

  pub fn with_raw_quantity(mut self, raw_quantity: i32) -> GetCharactersCharacterIdContractsContractIdItems200Ok {
    self.raw_quantity = Some(raw_quantity);
    self
  }

  pub fn raw_quantity(&self) -> Option<&i32> {
    self.raw_quantity.as_ref()
  }

  pub fn reset_raw_quantity(&mut self) {
    self.raw_quantity = None;
  }

  pub fn set_record_id(&mut self, record_id: i64) {
    self.record_id = record_id;
  }

  pub fn with_record_id(mut self, record_id: i64) -> GetCharactersCharacterIdContractsContractIdItems200Ok {
    self.record_id = record_id;
    self
  }

  pub fn record_id(&self) -> &i64 {
    &self.record_id
  }


  pub fn set_type_id(&mut self, type_id: i32) {
    self.type_id = type_id;
  }

  pub fn with_type_id(mut self, type_id: i32) -> GetCharactersCharacterIdContractsContractIdItems200Ok {
    self.type_id = type_id;
    self
  }

  pub fn type_id(&self) -> &i32 {
    &self.type_id
  }


}



