/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetUniverseRegionsRegionIdOk : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetUniverseRegionsRegionIdOk {
  /// constellations array
  #[serde(rename = "constellations")]
  constellations: Vec<i32>,
  /// description string
  #[serde(rename = "description")]
  description: Option<String>,
  /// name string
  #[serde(rename = "name")]
  name: String,
  /// region_id integer
  #[serde(rename = "region_id")]
  region_id: i32
}

impl GetUniverseRegionsRegionIdOk {
  /// 200 ok object
  pub fn new(constellations: Vec<i32>, name: String, region_id: i32) -> GetUniverseRegionsRegionIdOk {
    GetUniverseRegionsRegionIdOk {
      constellations: constellations,
      description: None,
      name: name,
      region_id: region_id
    }
  }

  pub fn set_constellations(&mut self, constellations: Vec<i32>) {
    self.constellations = constellations;
  }

  pub fn with_constellations(mut self, constellations: Vec<i32>) -> GetUniverseRegionsRegionIdOk {
    self.constellations = constellations;
    self
  }

  pub fn constellations(&self) -> &Vec<i32> {
    &self.constellations
  }


  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> GetUniverseRegionsRegionIdOk {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> GetUniverseRegionsRegionIdOk {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_region_id(&mut self, region_id: i32) {
    self.region_id = region_id;
  }

  pub fn with_region_id(mut self, region_id: i32) -> GetUniverseRegionsRegionIdOk {
    self.region_id = region_id;
    self
  }

  pub fn region_id(&self) -> &i32 {
    &self.region_id
  }


}



