/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCharactersCharacterIdOk : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCharactersCharacterIdOk {
  /// The character's alliance ID
  #[serde(rename = "alliance_id")]
  alliance_id: Option<i32>,
  /// Creation date of the character
  #[serde(rename = "birthday")]
  birthday: String,
  /// bloodline_id integer
  #[serde(rename = "bloodline_id")]
  bloodline_id: i32,
  /// The character's corporation ID
  #[serde(rename = "corporation_id")]
  corporation_id: i32,
  /// description string
  #[serde(rename = "description")]
  description: Option<String>,
  /// ID of the faction the character is fighting for, if the character is enlisted in Factional Warfare
  #[serde(rename = "faction_id")]
  faction_id: Option<i32>,
  /// gender string
  #[serde(rename = "gender")]
  gender: String,
  /// name string
  #[serde(rename = "name")]
  name: String,
  /// race_id integer
  #[serde(rename = "race_id")]
  race_id: i32,
  /// security_status number
  #[serde(rename = "security_status")]
  security_status: Option<f32>,
  /// The individual title of the character
  #[serde(rename = "title")]
  title: Option<String>
}

impl GetCharactersCharacterIdOk {
  /// 200 ok object
  pub fn new(birthday: String, bloodline_id: i32, corporation_id: i32, gender: String, name: String, race_id: i32) -> GetCharactersCharacterIdOk {
    GetCharactersCharacterIdOk {
      alliance_id: None,
      birthday: birthday,
      bloodline_id: bloodline_id,
      corporation_id: corporation_id,
      description: None,
      faction_id: None,
      gender: gender,
      name: name,
      race_id: race_id,
      security_status: None,
      title: None
    }
  }

  pub fn set_alliance_id(&mut self, alliance_id: i32) {
    self.alliance_id = Some(alliance_id);
  }

  pub fn with_alliance_id(mut self, alliance_id: i32) -> GetCharactersCharacterIdOk {
    self.alliance_id = Some(alliance_id);
    self
  }

  pub fn alliance_id(&self) -> Option<&i32> {
    self.alliance_id.as_ref()
  }

  pub fn reset_alliance_id(&mut self) {
    self.alliance_id = None;
  }

  pub fn set_birthday(&mut self, birthday: String) {
    self.birthday = birthday;
  }

  pub fn with_birthday(mut self, birthday: String) -> GetCharactersCharacterIdOk {
    self.birthday = birthday;
    self
  }

  pub fn birthday(&self) -> &String {
    &self.birthday
  }


  pub fn set_bloodline_id(&mut self, bloodline_id: i32) {
    self.bloodline_id = bloodline_id;
  }

  pub fn with_bloodline_id(mut self, bloodline_id: i32) -> GetCharactersCharacterIdOk {
    self.bloodline_id = bloodline_id;
    self
  }

  pub fn bloodline_id(&self) -> &i32 {
    &self.bloodline_id
  }


  pub fn set_corporation_id(&mut self, corporation_id: i32) {
    self.corporation_id = corporation_id;
  }

  pub fn with_corporation_id(mut self, corporation_id: i32) -> GetCharactersCharacterIdOk {
    self.corporation_id = corporation_id;
    self
  }

  pub fn corporation_id(&self) -> &i32 {
    &self.corporation_id
  }


  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> GetCharactersCharacterIdOk {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_faction_id(&mut self, faction_id: i32) {
    self.faction_id = Some(faction_id);
  }

  pub fn with_faction_id(mut self, faction_id: i32) -> GetCharactersCharacterIdOk {
    self.faction_id = Some(faction_id);
    self
  }

  pub fn faction_id(&self) -> Option<&i32> {
    self.faction_id.as_ref()
  }

  pub fn reset_faction_id(&mut self) {
    self.faction_id = None;
  }

  pub fn set_gender(&mut self, gender: String) {
    self.gender = gender;
  }

  pub fn with_gender(mut self, gender: String) -> GetCharactersCharacterIdOk {
    self.gender = gender;
    self
  }

  pub fn gender(&self) -> &String {
    &self.gender
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> GetCharactersCharacterIdOk {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_race_id(&mut self, race_id: i32) {
    self.race_id = race_id;
  }

  pub fn with_race_id(mut self, race_id: i32) -> GetCharactersCharacterIdOk {
    self.race_id = race_id;
    self
  }

  pub fn race_id(&self) -> &i32 {
    &self.race_id
  }


  pub fn set_security_status(&mut self, security_status: f32) {
    self.security_status = Some(security_status);
  }

  pub fn with_security_status(mut self, security_status: f32) -> GetCharactersCharacterIdOk {
    self.security_status = Some(security_status);
    self
  }

  pub fn security_status(&self) -> Option<&f32> {
    self.security_status.as_ref()
  }

  pub fn reset_security_status(&mut self) {
    self.security_status = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> GetCharactersCharacterIdOk {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

}



