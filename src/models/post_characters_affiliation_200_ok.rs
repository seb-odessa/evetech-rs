/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PostCharactersAffiliation200Ok : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PostCharactersAffiliation200Ok {
  /// The character's alliance ID, if their corporation is in an alliance
  #[serde(rename = "alliance_id")]
  alliance_id: Option<i32>,
  /// The character's ID
  #[serde(rename = "character_id")]
  character_id: i32,
  /// The character's corporation ID
  #[serde(rename = "corporation_id")]
  corporation_id: i32,
  /// The character's faction ID, if their corporation is in a faction
  #[serde(rename = "faction_id")]
  faction_id: Option<i32>
}

impl PostCharactersAffiliation200Ok {
  /// 200 ok object
  pub fn new(character_id: i32, corporation_id: i32) -> PostCharactersAffiliation200Ok {
    PostCharactersAffiliation200Ok {
      alliance_id: None,
      character_id: character_id,
      corporation_id: corporation_id,
      faction_id: None
    }
  }

  pub fn set_alliance_id(&mut self, alliance_id: i32) {
    self.alliance_id = Some(alliance_id);
  }

  pub fn with_alliance_id(mut self, alliance_id: i32) -> PostCharactersAffiliation200Ok {
    self.alliance_id = Some(alliance_id);
    self
  }

  pub fn alliance_id(&self) -> Option<&i32> {
    self.alliance_id.as_ref()
  }

  pub fn reset_alliance_id(&mut self) {
    self.alliance_id = None;
  }

  pub fn set_character_id(&mut self, character_id: i32) {
    self.character_id = character_id;
  }

  pub fn with_character_id(mut self, character_id: i32) -> PostCharactersAffiliation200Ok {
    self.character_id = character_id;
    self
  }

  pub fn character_id(&self) -> &i32 {
    &self.character_id
  }


  pub fn set_corporation_id(&mut self, corporation_id: i32) {
    self.corporation_id = corporation_id;
  }

  pub fn with_corporation_id(mut self, corporation_id: i32) -> PostCharactersAffiliation200Ok {
    self.corporation_id = corporation_id;
    self
  }

  pub fn corporation_id(&self) -> &i32 {
    &self.corporation_id
  }


  pub fn set_faction_id(&mut self, faction_id: i32) {
    self.faction_id = Some(faction_id);
  }

  pub fn with_faction_id(mut self, faction_id: i32) -> PostCharactersAffiliation200Ok {
    self.faction_id = Some(faction_id);
    self
  }

  pub fn faction_id(&self) -> Option<&i32> {
    self.faction_id.as_ref()
  }

  pub fn reset_faction_id(&mut self) {
    self.faction_id = None;
  }

}



