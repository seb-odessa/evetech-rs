/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetUniverseAncestries200Ok : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetUniverseAncestries200Ok {
  /// The bloodline associated with this ancestry
  #[serde(rename = "bloodline_id")]
  bloodline_id: i32,
  /// description string
  #[serde(rename = "description")]
  description: String,
  /// icon_id integer
  #[serde(rename = "icon_id")]
  icon_id: Option<i32>,
  /// id integer
  #[serde(rename = "id")]
  id: i32,
  /// name string
  #[serde(rename = "name")]
  name: String,
  /// short_description string
  #[serde(rename = "short_description")]
  short_description: Option<String>
}

impl GetUniverseAncestries200Ok {
  /// 200 ok object
  pub fn new(bloodline_id: i32, description: String, id: i32, name: String) -> GetUniverseAncestries200Ok {
    GetUniverseAncestries200Ok {
      bloodline_id: bloodline_id,
      description: description,
      icon_id: None,
      id: id,
      name: name,
      short_description: None
    }
  }

  pub fn set_bloodline_id(&mut self, bloodline_id: i32) {
    self.bloodline_id = bloodline_id;
  }

  pub fn with_bloodline_id(mut self, bloodline_id: i32) -> GetUniverseAncestries200Ok {
    self.bloodline_id = bloodline_id;
    self
  }

  pub fn bloodline_id(&self) -> &i32 {
    &self.bloodline_id
  }


  pub fn set_description(&mut self, description: String) {
    self.description = description;
  }

  pub fn with_description(mut self, description: String) -> GetUniverseAncestries200Ok {
    self.description = description;
    self
  }

  pub fn description(&self) -> &String {
    &self.description
  }


  pub fn set_icon_id(&mut self, icon_id: i32) {
    self.icon_id = Some(icon_id);
  }

  pub fn with_icon_id(mut self, icon_id: i32) -> GetUniverseAncestries200Ok {
    self.icon_id = Some(icon_id);
    self
  }

  pub fn icon_id(&self) -> Option<&i32> {
    self.icon_id.as_ref()
  }

  pub fn reset_icon_id(&mut self) {
    self.icon_id = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = id;
  }

  pub fn with_id(mut self, id: i32) -> GetUniverseAncestries200Ok {
    self.id = id;
    self
  }

  pub fn id(&self) -> &i32 {
    &self.id
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> GetUniverseAncestries200Ok {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_short_description(&mut self, short_description: String) {
    self.short_description = Some(short_description);
  }

  pub fn with_short_description(mut self, short_description: String) -> GetUniverseAncestries200Ok {
    self.short_description = Some(short_description);
    self
  }

  pub fn short_description(&self) -> Option<&String> {
    self.short_description.as_ref()
  }

  pub fn reset_short_description(&mut self) {
    self.short_description = None;
  }

}



