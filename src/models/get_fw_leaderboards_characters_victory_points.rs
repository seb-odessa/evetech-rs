/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetFwLeaderboardsCharactersVictoryPoints : Top 100 rankings of pilots by victory points from yesterday, last week and in total

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetFwLeaderboardsCharactersVictoryPoints {
  /// Top 100 ranking of pilots active in faction warfare by total victory points. A pilot is considered \"active\" if they have participated in faction warfare in the past 14 days
  #[serde(rename = "active_total")]
  active_total: Vec<::models::GetFwLeaderboardsCharactersActiveTotalActiveTotal1>,
  /// Top 100 ranking of pilots by victory points in the past week
  #[serde(rename = "last_week")]
  last_week: Vec<::models::GetFwLeaderboardsCharactersLastWeekLastWeek1>,
  /// Top 100 ranking of pilots by victory points in the past day
  #[serde(rename = "yesterday")]
  yesterday: Vec<::models::GetFwLeaderboardsCharactersYesterdayYesterday1>
}

impl GetFwLeaderboardsCharactersVictoryPoints {
  /// Top 100 rankings of pilots by victory points from yesterday, last week and in total
  pub fn new(active_total: Vec<::models::GetFwLeaderboardsCharactersActiveTotalActiveTotal1>, last_week: Vec<::models::GetFwLeaderboardsCharactersLastWeekLastWeek1>, yesterday: Vec<::models::GetFwLeaderboardsCharactersYesterdayYesterday1>) -> GetFwLeaderboardsCharactersVictoryPoints {
    GetFwLeaderboardsCharactersVictoryPoints {
      active_total: active_total,
      last_week: last_week,
      yesterday: yesterday
    }
  }

  pub fn set_active_total(&mut self, active_total: Vec<::models::GetFwLeaderboardsCharactersActiveTotalActiveTotal1>) {
    self.active_total = active_total;
  }

  pub fn with_active_total(mut self, active_total: Vec<::models::GetFwLeaderboardsCharactersActiveTotalActiveTotal1>) -> GetFwLeaderboardsCharactersVictoryPoints {
    self.active_total = active_total;
    self
  }

  pub fn active_total(&self) -> &Vec<::models::GetFwLeaderboardsCharactersActiveTotalActiveTotal1> {
    &self.active_total
  }


  pub fn set_last_week(&mut self, last_week: Vec<::models::GetFwLeaderboardsCharactersLastWeekLastWeek1>) {
    self.last_week = last_week;
  }

  pub fn with_last_week(mut self, last_week: Vec<::models::GetFwLeaderboardsCharactersLastWeekLastWeek1>) -> GetFwLeaderboardsCharactersVictoryPoints {
    self.last_week = last_week;
    self
  }

  pub fn last_week(&self) -> &Vec<::models::GetFwLeaderboardsCharactersLastWeekLastWeek1> {
    &self.last_week
  }


  pub fn set_yesterday(&mut self, yesterday: Vec<::models::GetFwLeaderboardsCharactersYesterdayYesterday1>) {
    self.yesterday = yesterday;
  }

  pub fn with_yesterday(mut self, yesterday: Vec<::models::GetFwLeaderboardsCharactersYesterdayYesterday1>) -> GetFwLeaderboardsCharactersVictoryPoints {
    self.yesterday = yesterday;
    self
  }

  pub fn yesterday(&self) -> &Vec<::models::GetFwLeaderboardsCharactersYesterdayYesterday1> {
    &self.yesterday
  }


}



