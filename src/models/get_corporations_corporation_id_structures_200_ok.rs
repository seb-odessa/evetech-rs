/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCorporationsCorporationIdStructures200Ok : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCorporationsCorporationIdStructures200Ok {
  /// ID of the corporation that owns the structure
  #[serde(rename = "corporation_id")]
  corporation_id: i32,
  /// Date on which the structure will run out of fuel
  #[serde(rename = "fuel_expires")]
  fuel_expires: Option<String>,
  /// The structure name
  #[serde(rename = "name")]
  name: Option<String>,
  /// The date and time when the structure's newly requested reinforcement times (e.g. next_reinforce_hour and next_reinforce_day) will take effect
  #[serde(rename = "next_reinforce_apply")]
  next_reinforce_apply: Option<String>,
  /// The requested change to reinforce_hour that will take effect at the time shown by next_reinforce_apply
  #[serde(rename = "next_reinforce_hour")]
  next_reinforce_hour: Option<i32>,
  /// The id of the ACL profile for this citadel
  #[serde(rename = "profile_id")]
  profile_id: i32,
  /// The hour of day that determines the four hour window when the structure will randomly exit its reinforcement periods and become vulnerable to attack against its armor and/or hull. The structure will become vulnerable at a random time that is +/- 2 hours centered on the value of this property
  #[serde(rename = "reinforce_hour")]
  reinforce_hour: Option<i32>,
  /// Contains a list of service upgrades, and their state
  #[serde(rename = "services")]
  services: Option<Vec<::models::GetCorporationsCorporationIdStructuresService>>,
  /// state string
  #[serde(rename = "state")]
  state: String,
  /// Date at which the structure will move to it's next state
  #[serde(rename = "state_timer_end")]
  state_timer_end: Option<String>,
  /// Date at which the structure entered it's current state
  #[serde(rename = "state_timer_start")]
  state_timer_start: Option<String>,
  /// The Item ID of the structure
  #[serde(rename = "structure_id")]
  structure_id: i64,
  /// The solar system the structure is in
  #[serde(rename = "system_id")]
  system_id: i32,
  /// The type id of the structure
  #[serde(rename = "type_id")]
  type_id: i32,
  /// Date at which the structure will unanchor
  #[serde(rename = "unanchors_at")]
  unanchors_at: Option<String>
}

impl GetCorporationsCorporationIdStructures200Ok {
  /// 200 ok object
  pub fn new(corporation_id: i32, profile_id: i32, state: String, structure_id: i64, system_id: i32, type_id: i32) -> GetCorporationsCorporationIdStructures200Ok {
    GetCorporationsCorporationIdStructures200Ok {
      corporation_id: corporation_id,
      fuel_expires: None,
      name: None,
      next_reinforce_apply: None,
      next_reinforce_hour: None,
      profile_id: profile_id,
      reinforce_hour: None,
      services: None,
      state: state,
      state_timer_end: None,
      state_timer_start: None,
      structure_id: structure_id,
      system_id: system_id,
      type_id: type_id,
      unanchors_at: None
    }
  }

  pub fn set_corporation_id(&mut self, corporation_id: i32) {
    self.corporation_id = corporation_id;
  }

  pub fn with_corporation_id(mut self, corporation_id: i32) -> GetCorporationsCorporationIdStructures200Ok {
    self.corporation_id = corporation_id;
    self
  }

  pub fn corporation_id(&self) -> &i32 {
    &self.corporation_id
  }


  pub fn set_fuel_expires(&mut self, fuel_expires: String) {
    self.fuel_expires = Some(fuel_expires);
  }

  pub fn with_fuel_expires(mut self, fuel_expires: String) -> GetCorporationsCorporationIdStructures200Ok {
    self.fuel_expires = Some(fuel_expires);
    self
  }

  pub fn fuel_expires(&self) -> Option<&String> {
    self.fuel_expires.as_ref()
  }

  pub fn reset_fuel_expires(&mut self) {
    self.fuel_expires = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> GetCorporationsCorporationIdStructures200Ok {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_next_reinforce_apply(&mut self, next_reinforce_apply: String) {
    self.next_reinforce_apply = Some(next_reinforce_apply);
  }

  pub fn with_next_reinforce_apply(mut self, next_reinforce_apply: String) -> GetCorporationsCorporationIdStructures200Ok {
    self.next_reinforce_apply = Some(next_reinforce_apply);
    self
  }

  pub fn next_reinforce_apply(&self) -> Option<&String> {
    self.next_reinforce_apply.as_ref()
  }

  pub fn reset_next_reinforce_apply(&mut self) {
    self.next_reinforce_apply = None;
  }

  pub fn set_next_reinforce_hour(&mut self, next_reinforce_hour: i32) {
    self.next_reinforce_hour = Some(next_reinforce_hour);
  }

  pub fn with_next_reinforce_hour(mut self, next_reinforce_hour: i32) -> GetCorporationsCorporationIdStructures200Ok {
    self.next_reinforce_hour = Some(next_reinforce_hour);
    self
  }

  pub fn next_reinforce_hour(&self) -> Option<&i32> {
    self.next_reinforce_hour.as_ref()
  }

  pub fn reset_next_reinforce_hour(&mut self) {
    self.next_reinforce_hour = None;
  }

  pub fn set_profile_id(&mut self, profile_id: i32) {
    self.profile_id = profile_id;
  }

  pub fn with_profile_id(mut self, profile_id: i32) -> GetCorporationsCorporationIdStructures200Ok {
    self.profile_id = profile_id;
    self
  }

  pub fn profile_id(&self) -> &i32 {
    &self.profile_id
  }


  pub fn set_reinforce_hour(&mut self, reinforce_hour: i32) {
    self.reinforce_hour = Some(reinforce_hour);
  }

  pub fn with_reinforce_hour(mut self, reinforce_hour: i32) -> GetCorporationsCorporationIdStructures200Ok {
    self.reinforce_hour = Some(reinforce_hour);
    self
  }

  pub fn reinforce_hour(&self) -> Option<&i32> {
    self.reinforce_hour.as_ref()
  }

  pub fn reset_reinforce_hour(&mut self) {
    self.reinforce_hour = None;
  }

  pub fn set_services(&mut self, services: Vec<::models::GetCorporationsCorporationIdStructuresService>) {
    self.services = Some(services);
  }

  pub fn with_services(mut self, services: Vec<::models::GetCorporationsCorporationIdStructuresService>) -> GetCorporationsCorporationIdStructures200Ok {
    self.services = Some(services);
    self
  }

  pub fn services(&self) -> Option<&Vec<::models::GetCorporationsCorporationIdStructuresService>> {
    self.services.as_ref()
  }

  pub fn reset_services(&mut self) {
    self.services = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = state;
  }

  pub fn with_state(mut self, state: String) -> GetCorporationsCorporationIdStructures200Ok {
    self.state = state;
    self
  }

  pub fn state(&self) -> &String {
    &self.state
  }


  pub fn set_state_timer_end(&mut self, state_timer_end: String) {
    self.state_timer_end = Some(state_timer_end);
  }

  pub fn with_state_timer_end(mut self, state_timer_end: String) -> GetCorporationsCorporationIdStructures200Ok {
    self.state_timer_end = Some(state_timer_end);
    self
  }

  pub fn state_timer_end(&self) -> Option<&String> {
    self.state_timer_end.as_ref()
  }

  pub fn reset_state_timer_end(&mut self) {
    self.state_timer_end = None;
  }

  pub fn set_state_timer_start(&mut self, state_timer_start: String) {
    self.state_timer_start = Some(state_timer_start);
  }

  pub fn with_state_timer_start(mut self, state_timer_start: String) -> GetCorporationsCorporationIdStructures200Ok {
    self.state_timer_start = Some(state_timer_start);
    self
  }

  pub fn state_timer_start(&self) -> Option<&String> {
    self.state_timer_start.as_ref()
  }

  pub fn reset_state_timer_start(&mut self) {
    self.state_timer_start = None;
  }

  pub fn set_structure_id(&mut self, structure_id: i64) {
    self.structure_id = structure_id;
  }

  pub fn with_structure_id(mut self, structure_id: i64) -> GetCorporationsCorporationIdStructures200Ok {
    self.structure_id = structure_id;
    self
  }

  pub fn structure_id(&self) -> &i64 {
    &self.structure_id
  }


  pub fn set_system_id(&mut self, system_id: i32) {
    self.system_id = system_id;
  }

  pub fn with_system_id(mut self, system_id: i32) -> GetCorporationsCorporationIdStructures200Ok {
    self.system_id = system_id;
    self
  }

  pub fn system_id(&self) -> &i32 {
    &self.system_id
  }


  pub fn set_type_id(&mut self, type_id: i32) {
    self.type_id = type_id;
  }

  pub fn with_type_id(mut self, type_id: i32) -> GetCorporationsCorporationIdStructures200Ok {
    self.type_id = type_id;
    self
  }

  pub fn type_id(&self) -> &i32 {
    &self.type_id
  }


  pub fn set_unanchors_at(&mut self, unanchors_at: String) {
    self.unanchors_at = Some(unanchors_at);
  }

  pub fn with_unanchors_at(mut self, unanchors_at: String) -> GetCorporationsCorporationIdStructures200Ok {
    self.unanchors_at = Some(unanchors_at);
    self
  }

  pub fn unanchors_at(&self) -> Option<&String> {
    self.unanchors_at.as_ref()
  }

  pub fn reset_unanchors_at(&mut self) {
    self.unanchors_at = None;
  }

}



