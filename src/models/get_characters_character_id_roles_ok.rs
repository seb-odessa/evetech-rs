/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCharactersCharacterIdRolesOk : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCharactersCharacterIdRolesOk {
  /// roles array
  #[serde(rename = "roles")]
  roles: Option<Vec<String>>,
  /// roles_at_base array
  #[serde(rename = "roles_at_base")]
  roles_at_base: Option<Vec<String>>,
  /// roles_at_hq array
  #[serde(rename = "roles_at_hq")]
  roles_at_hq: Option<Vec<String>>,
  /// roles_at_other array
  #[serde(rename = "roles_at_other")]
  roles_at_other: Option<Vec<String>>
}

impl GetCharactersCharacterIdRolesOk {
  /// 200 ok object
  pub fn new() -> GetCharactersCharacterIdRolesOk {
    GetCharactersCharacterIdRolesOk {
      roles: None,
      roles_at_base: None,
      roles_at_hq: None,
      roles_at_other: None
    }
  }

  pub fn set_roles(&mut self, roles: Vec<String>) {
    self.roles = Some(roles);
  }

  pub fn with_roles(mut self, roles: Vec<String>) -> GetCharactersCharacterIdRolesOk {
    self.roles = Some(roles);
    self
  }

  pub fn roles(&self) -> Option<&Vec<String>> {
    self.roles.as_ref()
  }

  pub fn reset_roles(&mut self) {
    self.roles = None;
  }

  pub fn set_roles_at_base(&mut self, roles_at_base: Vec<String>) {
    self.roles_at_base = Some(roles_at_base);
  }

  pub fn with_roles_at_base(mut self, roles_at_base: Vec<String>) -> GetCharactersCharacterIdRolesOk {
    self.roles_at_base = Some(roles_at_base);
    self
  }

  pub fn roles_at_base(&self) -> Option<&Vec<String>> {
    self.roles_at_base.as_ref()
  }

  pub fn reset_roles_at_base(&mut self) {
    self.roles_at_base = None;
  }

  pub fn set_roles_at_hq(&mut self, roles_at_hq: Vec<String>) {
    self.roles_at_hq = Some(roles_at_hq);
  }

  pub fn with_roles_at_hq(mut self, roles_at_hq: Vec<String>) -> GetCharactersCharacterIdRolesOk {
    self.roles_at_hq = Some(roles_at_hq);
    self
  }

  pub fn roles_at_hq(&self) -> Option<&Vec<String>> {
    self.roles_at_hq.as_ref()
  }

  pub fn reset_roles_at_hq(&mut self) {
    self.roles_at_hq = None;
  }

  pub fn set_roles_at_other(&mut self, roles_at_other: Vec<String>) {
    self.roles_at_other = Some(roles_at_other);
  }

  pub fn with_roles_at_other(mut self, roles_at_other: Vec<String>) -> GetCharactersCharacterIdRolesOk {
    self.roles_at_other = Some(roles_at_other);
    self
  }

  pub fn roles_at_other(&self) -> Option<&Vec<String>> {
    self.roles_at_other.as_ref()
  }

  pub fn reset_roles_at_other(&mut self) {
    self.roles_at_other = None;
  }

}



