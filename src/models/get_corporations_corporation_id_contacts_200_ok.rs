/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCorporationsCorporationIdContacts200Ok : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCorporationsCorporationIdContacts200Ok {
  /// contact_id integer
  #[serde(rename = "contact_id")]
  contact_id: i32,
  /// contact_type string
  #[serde(rename = "contact_type")]
  contact_type: String,
  /// Whether this contact is being watched
  #[serde(rename = "is_watched")]
  is_watched: Option<bool>,
  /// label_ids array
  #[serde(rename = "label_ids")]
  label_ids: Option<Vec<i64>>,
  /// Standing of the contact
  #[serde(rename = "standing")]
  standing: f32
}

impl GetCorporationsCorporationIdContacts200Ok {
  /// 200 ok object
  pub fn new(contact_id: i32, contact_type: String, standing: f32) -> GetCorporationsCorporationIdContacts200Ok {
    GetCorporationsCorporationIdContacts200Ok {
      contact_id: contact_id,
      contact_type: contact_type,
      is_watched: None,
      label_ids: None,
      standing: standing
    }
  }

  pub fn set_contact_id(&mut self, contact_id: i32) {
    self.contact_id = contact_id;
  }

  pub fn with_contact_id(mut self, contact_id: i32) -> GetCorporationsCorporationIdContacts200Ok {
    self.contact_id = contact_id;
    self
  }

  pub fn contact_id(&self) -> &i32 {
    &self.contact_id
  }


  pub fn set_contact_type(&mut self, contact_type: String) {
    self.contact_type = contact_type;
  }

  pub fn with_contact_type(mut self, contact_type: String) -> GetCorporationsCorporationIdContacts200Ok {
    self.contact_type = contact_type;
    self
  }

  pub fn contact_type(&self) -> &String {
    &self.contact_type
  }


  pub fn set_is_watched(&mut self, is_watched: bool) {
    self.is_watched = Some(is_watched);
  }

  pub fn with_is_watched(mut self, is_watched: bool) -> GetCorporationsCorporationIdContacts200Ok {
    self.is_watched = Some(is_watched);
    self
  }

  pub fn is_watched(&self) -> Option<&bool> {
    self.is_watched.as_ref()
  }

  pub fn reset_is_watched(&mut self) {
    self.is_watched = None;
  }

  pub fn set_label_ids(&mut self, label_ids: Vec<i64>) {
    self.label_ids = Some(label_ids);
  }

  pub fn with_label_ids(mut self, label_ids: Vec<i64>) -> GetCorporationsCorporationIdContacts200Ok {
    self.label_ids = Some(label_ids);
    self
  }

  pub fn label_ids(&self) -> Option<&Vec<i64>> {
    self.label_ids.as_ref()
  }

  pub fn reset_label_ids(&mut self) {
    self.label_ids = None;
  }

  pub fn set_standing(&mut self, standing: f32) {
    self.standing = standing;
  }

  pub fn with_standing(mut self, standing: f32) -> GetCorporationsCorporationIdContacts200Ok {
    self.standing = standing;
    self
  }

  pub fn standing(&self) -> &f32 {
    &self.standing
  }


}



