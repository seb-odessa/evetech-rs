/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCharactersCharacterIdMailMailIdOk : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCharactersCharacterIdMailMailIdOk {
  /// Mail's body
  #[serde(rename = "body")]
  body: Option<String>,
  /// From whom the mail was sent
  #[serde(rename = "from")]
  from: Option<i32>,
  /// Labels attached to the mail
  #[serde(rename = "labels")]
  labels: Option<Vec<i32>>,
  /// Whether the mail is flagged as read
  #[serde(rename = "read")]
  read: Option<bool>,
  /// Recipients of the mail
  #[serde(rename = "recipients")]
  recipients: Option<Vec<::models::GetCharactersCharacterIdMailMailIdRecipient>>,
  /// Mail subject
  #[serde(rename = "subject")]
  subject: Option<String>,
  /// When the mail was sent
  #[serde(rename = "timestamp")]
  timestamp: Option<String>
}

impl GetCharactersCharacterIdMailMailIdOk {
  /// 200 ok object
  pub fn new() -> GetCharactersCharacterIdMailMailIdOk {
    GetCharactersCharacterIdMailMailIdOk {
      body: None,
      from: None,
      labels: None,
      read: None,
      recipients: None,
      subject: None,
      timestamp: None
    }
  }

  pub fn set_body(&mut self, body: String) {
    self.body = Some(body);
  }

  pub fn with_body(mut self, body: String) -> GetCharactersCharacterIdMailMailIdOk {
    self.body = Some(body);
    self
  }

  pub fn body(&self) -> Option<&String> {
    self.body.as_ref()
  }

  pub fn reset_body(&mut self) {
    self.body = None;
  }

  pub fn set_from(&mut self, from: i32) {
    self.from = Some(from);
  }

  pub fn with_from(mut self, from: i32) -> GetCharactersCharacterIdMailMailIdOk {
    self.from = Some(from);
    self
  }

  pub fn from(&self) -> Option<&i32> {
    self.from.as_ref()
  }

  pub fn reset_from(&mut self) {
    self.from = None;
  }

  pub fn set_labels(&mut self, labels: Vec<i32>) {
    self.labels = Some(labels);
  }

  pub fn with_labels(mut self, labels: Vec<i32>) -> GetCharactersCharacterIdMailMailIdOk {
    self.labels = Some(labels);
    self
  }

  pub fn labels(&self) -> Option<&Vec<i32>> {
    self.labels.as_ref()
  }

  pub fn reset_labels(&mut self) {
    self.labels = None;
  }

  pub fn set_read(&mut self, read: bool) {
    self.read = Some(read);
  }

  pub fn with_read(mut self, read: bool) -> GetCharactersCharacterIdMailMailIdOk {
    self.read = Some(read);
    self
  }

  pub fn read(&self) -> Option<&bool> {
    self.read.as_ref()
  }

  pub fn reset_read(&mut self) {
    self.read = None;
  }

  pub fn set_recipients(&mut self, recipients: Vec<::models::GetCharactersCharacterIdMailMailIdRecipient>) {
    self.recipients = Some(recipients);
  }

  pub fn with_recipients(mut self, recipients: Vec<::models::GetCharactersCharacterIdMailMailIdRecipient>) -> GetCharactersCharacterIdMailMailIdOk {
    self.recipients = Some(recipients);
    self
  }

  pub fn recipients(&self) -> Option<&Vec<::models::GetCharactersCharacterIdMailMailIdRecipient>> {
    self.recipients.as_ref()
  }

  pub fn reset_recipients(&mut self) {
    self.recipients = None;
  }

  pub fn set_subject(&mut self, subject: String) {
    self.subject = Some(subject);
  }

  pub fn with_subject(mut self, subject: String) -> GetCharactersCharacterIdMailMailIdOk {
    self.subject = Some(subject);
    self
  }

  pub fn subject(&self) -> Option<&String> {
    self.subject.as_ref()
  }

  pub fn reset_subject(&mut self) {
    self.subject = None;
  }

  pub fn set_timestamp(&mut self, timestamp: String) {
    self.timestamp = Some(timestamp);
  }

  pub fn with_timestamp(mut self, timestamp: String) -> GetCharactersCharacterIdMailMailIdOk {
    self.timestamp = Some(timestamp);
    self
  }

  pub fn timestamp(&self) -> Option<&String> {
    self.timestamp.as_ref()
  }

  pub fn reset_timestamp(&mut self) {
    self.timestamp = None;
  }

}



