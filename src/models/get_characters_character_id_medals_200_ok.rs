/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCharactersCharacterIdMedals200Ok : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCharactersCharacterIdMedals200Ok {
  /// corporation_id integer
  #[serde(rename = "corporation_id")]
  corporation_id: i32,
  /// date string
  #[serde(rename = "date")]
  date: String,
  /// description string
  #[serde(rename = "description")]
  description: String,
  /// graphics array
  #[serde(rename = "graphics")]
  graphics: Vec<::models::GetCharactersCharacterIdMedalsGraphic>,
  /// issuer_id integer
  #[serde(rename = "issuer_id")]
  issuer_id: i32,
  /// medal_id integer
  #[serde(rename = "medal_id")]
  medal_id: i32,
  /// reason string
  #[serde(rename = "reason")]
  reason: String,
  /// status string
  #[serde(rename = "status")]
  status: String,
  /// title string
  #[serde(rename = "title")]
  title: String
}

impl GetCharactersCharacterIdMedals200Ok {
  /// 200 ok object
  pub fn new(corporation_id: i32, date: String, description: String, graphics: Vec<::models::GetCharactersCharacterIdMedalsGraphic>, issuer_id: i32, medal_id: i32, reason: String, status: String, title: String) -> GetCharactersCharacterIdMedals200Ok {
    GetCharactersCharacterIdMedals200Ok {
      corporation_id: corporation_id,
      date: date,
      description: description,
      graphics: graphics,
      issuer_id: issuer_id,
      medal_id: medal_id,
      reason: reason,
      status: status,
      title: title
    }
  }

  pub fn set_corporation_id(&mut self, corporation_id: i32) {
    self.corporation_id = corporation_id;
  }

  pub fn with_corporation_id(mut self, corporation_id: i32) -> GetCharactersCharacterIdMedals200Ok {
    self.corporation_id = corporation_id;
    self
  }

  pub fn corporation_id(&self) -> &i32 {
    &self.corporation_id
  }


  pub fn set_date(&mut self, date: String) {
    self.date = date;
  }

  pub fn with_date(mut self, date: String) -> GetCharactersCharacterIdMedals200Ok {
    self.date = date;
    self
  }

  pub fn date(&self) -> &String {
    &self.date
  }


  pub fn set_description(&mut self, description: String) {
    self.description = description;
  }

  pub fn with_description(mut self, description: String) -> GetCharactersCharacterIdMedals200Ok {
    self.description = description;
    self
  }

  pub fn description(&self) -> &String {
    &self.description
  }


  pub fn set_graphics(&mut self, graphics: Vec<::models::GetCharactersCharacterIdMedalsGraphic>) {
    self.graphics = graphics;
  }

  pub fn with_graphics(mut self, graphics: Vec<::models::GetCharactersCharacterIdMedalsGraphic>) -> GetCharactersCharacterIdMedals200Ok {
    self.graphics = graphics;
    self
  }

  pub fn graphics(&self) -> &Vec<::models::GetCharactersCharacterIdMedalsGraphic> {
    &self.graphics
  }


  pub fn set_issuer_id(&mut self, issuer_id: i32) {
    self.issuer_id = issuer_id;
  }

  pub fn with_issuer_id(mut self, issuer_id: i32) -> GetCharactersCharacterIdMedals200Ok {
    self.issuer_id = issuer_id;
    self
  }

  pub fn issuer_id(&self) -> &i32 {
    &self.issuer_id
  }


  pub fn set_medal_id(&mut self, medal_id: i32) {
    self.medal_id = medal_id;
  }

  pub fn with_medal_id(mut self, medal_id: i32) -> GetCharactersCharacterIdMedals200Ok {
    self.medal_id = medal_id;
    self
  }

  pub fn medal_id(&self) -> &i32 {
    &self.medal_id
  }


  pub fn set_reason(&mut self, reason: String) {
    self.reason = reason;
  }

  pub fn with_reason(mut self, reason: String) -> GetCharactersCharacterIdMedals200Ok {
    self.reason = reason;
    self
  }

  pub fn reason(&self) -> &String {
    &self.reason
  }


  pub fn set_status(&mut self, status: String) {
    self.status = status;
  }

  pub fn with_status(mut self, status: String) -> GetCharactersCharacterIdMedals200Ok {
    self.status = status;
    self
  }

  pub fn status(&self) -> &String {
    &self.status
  }


  pub fn set_title(&mut self, title: String) {
    self.title = title;
  }

  pub fn with_title(mut self, title: String) -> GetCharactersCharacterIdMedals200Ok {
    self.title = title;
    self
  }

  pub fn title(&self) -> &String {
    &self.title
  }


}



