/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCharactersCharacterIdOnlineOk : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCharactersCharacterIdOnlineOk {
  /// Timestamp of the last login
  #[serde(rename = "last_login")]
  last_login: Option<String>,
  /// Timestamp of the last logout
  #[serde(rename = "last_logout")]
  last_logout: Option<String>,
  /// Total number of times the character has logged in
  #[serde(rename = "logins")]
  logins: Option<i32>,
  /// If the character is online
  #[serde(rename = "online")]
  online: bool
}

impl GetCharactersCharacterIdOnlineOk {
  /// 200 ok object
  pub fn new(online: bool) -> GetCharactersCharacterIdOnlineOk {
    GetCharactersCharacterIdOnlineOk {
      last_login: None,
      last_logout: None,
      logins: None,
      online: online
    }
  }

  pub fn set_last_login(&mut self, last_login: String) {
    self.last_login = Some(last_login);
  }

  pub fn with_last_login(mut self, last_login: String) -> GetCharactersCharacterIdOnlineOk {
    self.last_login = Some(last_login);
    self
  }

  pub fn last_login(&self) -> Option<&String> {
    self.last_login.as_ref()
  }

  pub fn reset_last_login(&mut self) {
    self.last_login = None;
  }

  pub fn set_last_logout(&mut self, last_logout: String) {
    self.last_logout = Some(last_logout);
  }

  pub fn with_last_logout(mut self, last_logout: String) -> GetCharactersCharacterIdOnlineOk {
    self.last_logout = Some(last_logout);
    self
  }

  pub fn last_logout(&self) -> Option<&String> {
    self.last_logout.as_ref()
  }

  pub fn reset_last_logout(&mut self) {
    self.last_logout = None;
  }

  pub fn set_logins(&mut self, logins: i32) {
    self.logins = Some(logins);
  }

  pub fn with_logins(mut self, logins: i32) -> GetCharactersCharacterIdOnlineOk {
    self.logins = Some(logins);
    self
  }

  pub fn logins(&self) -> Option<&i32> {
    self.logins.as_ref()
  }

  pub fn reset_logins(&mut self) {
    self.logins = None;
  }

  pub fn set_online(&mut self, online: bool) {
    self.online = online;
  }

  pub fn with_online(mut self, online: bool) -> GetCharactersCharacterIdOnlineOk {
    self.online = online;
    self
  }

  pub fn online(&self) -> &bool {
    &self.online
  }


}



