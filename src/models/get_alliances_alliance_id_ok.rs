/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetAlliancesAllianceIdOk : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetAlliancesAllianceIdOk {
  /// ID of the corporation that created the alliance
  #[serde(rename = "creator_corporation_id")]
  creator_corporation_id: i32,
  /// ID of the character that created the alliance
  #[serde(rename = "creator_id")]
  creator_id: i32,
  /// date_founded string
  #[serde(rename = "date_founded")]
  date_founded: String,
  /// the executor corporation ID, if this alliance is not closed
  #[serde(rename = "executor_corporation_id")]
  executor_corporation_id: Option<i32>,
  /// Faction ID this alliance is fighting for, if this alliance is enlisted in factional warfare
  #[serde(rename = "faction_id")]
  faction_id: Option<i32>,
  /// the full name of the alliance
  #[serde(rename = "name")]
  name: String,
  /// the short name of the alliance
  #[serde(rename = "ticker")]
  ticker: String
}

impl GetAlliancesAllianceIdOk {
  /// 200 ok object
  pub fn new(creator_corporation_id: i32, creator_id: i32, date_founded: String, name: String, ticker: String) -> GetAlliancesAllianceIdOk {
    GetAlliancesAllianceIdOk {
      creator_corporation_id: creator_corporation_id,
      creator_id: creator_id,
      date_founded: date_founded,
      executor_corporation_id: None,
      faction_id: None,
      name: name,
      ticker: ticker
    }
  }

  pub fn set_creator_corporation_id(&mut self, creator_corporation_id: i32) {
    self.creator_corporation_id = creator_corporation_id;
  }

  pub fn with_creator_corporation_id(mut self, creator_corporation_id: i32) -> GetAlliancesAllianceIdOk {
    self.creator_corporation_id = creator_corporation_id;
    self
  }

  pub fn creator_corporation_id(&self) -> &i32 {
    &self.creator_corporation_id
  }


  pub fn set_creator_id(&mut self, creator_id: i32) {
    self.creator_id = creator_id;
  }

  pub fn with_creator_id(mut self, creator_id: i32) -> GetAlliancesAllianceIdOk {
    self.creator_id = creator_id;
    self
  }

  pub fn creator_id(&self) -> &i32 {
    &self.creator_id
  }


  pub fn set_date_founded(&mut self, date_founded: String) {
    self.date_founded = date_founded;
  }

  pub fn with_date_founded(mut self, date_founded: String) -> GetAlliancesAllianceIdOk {
    self.date_founded = date_founded;
    self
  }

  pub fn date_founded(&self) -> &String {
    &self.date_founded
  }


  pub fn set_executor_corporation_id(&mut self, executor_corporation_id: i32) {
    self.executor_corporation_id = Some(executor_corporation_id);
  }

  pub fn with_executor_corporation_id(mut self, executor_corporation_id: i32) -> GetAlliancesAllianceIdOk {
    self.executor_corporation_id = Some(executor_corporation_id);
    self
  }

  pub fn executor_corporation_id(&self) -> Option<&i32> {
    self.executor_corporation_id.as_ref()
  }

  pub fn reset_executor_corporation_id(&mut self) {
    self.executor_corporation_id = None;
  }

  pub fn set_faction_id(&mut self, faction_id: i32) {
    self.faction_id = Some(faction_id);
  }

  pub fn with_faction_id(mut self, faction_id: i32) -> GetAlliancesAllianceIdOk {
    self.faction_id = Some(faction_id);
    self
  }

  pub fn faction_id(&self) -> Option<&i32> {
    self.faction_id.as_ref()
  }

  pub fn reset_faction_id(&mut self) {
    self.faction_id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> GetAlliancesAllianceIdOk {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_ticker(&mut self, ticker: String) {
    self.ticker = ticker;
  }

  pub fn with_ticker(mut self, ticker: String) -> GetAlliancesAllianceIdOk {
    self.ticker = ticker;
    self
  }

  pub fn ticker(&self) -> &String {
    &self.ticker
  }


}



