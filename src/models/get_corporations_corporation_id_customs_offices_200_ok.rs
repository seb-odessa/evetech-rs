/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCorporationsCorporationIdCustomsOffices200Ok : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCorporationsCorporationIdCustomsOffices200Ok {
  /// Only present if alliance access is allowed
  #[serde(rename = "alliance_tax_rate")]
  alliance_tax_rate: Option<f32>,
  /// standing_level and any standing related tax rate only present when this is true
  #[serde(rename = "allow_access_with_standings")]
  allow_access_with_standings: bool,
  /// allow_alliance_access boolean
  #[serde(rename = "allow_alliance_access")]
  allow_alliance_access: bool,
  /// bad_standing_tax_rate number
  #[serde(rename = "bad_standing_tax_rate")]
  bad_standing_tax_rate: Option<f32>,
  /// corporation_tax_rate number
  #[serde(rename = "corporation_tax_rate")]
  corporation_tax_rate: Option<f32>,
  /// Tax rate for entities with excellent level of standing, only present if this level is allowed, same for all other standing related tax rates
  #[serde(rename = "excellent_standing_tax_rate")]
  excellent_standing_tax_rate: Option<f32>,
  /// good_standing_tax_rate number
  #[serde(rename = "good_standing_tax_rate")]
  good_standing_tax_rate: Option<f32>,
  /// neutral_standing_tax_rate number
  #[serde(rename = "neutral_standing_tax_rate")]
  neutral_standing_tax_rate: Option<f32>,
  /// unique ID of this customs office
  #[serde(rename = "office_id")]
  office_id: i64,
  /// reinforce_exit_end integer
  #[serde(rename = "reinforce_exit_end")]
  reinforce_exit_end: i32,
  /// Together with reinforce_exit_end, marks a 2-hour period where this customs office could exit reinforcement mode during the day after initial attack
  #[serde(rename = "reinforce_exit_start")]
  reinforce_exit_start: i32,
  /// Access is allowed only for entities with this level of standing or better
  #[serde(rename = "standing_level")]
  standing_level: Option<String>,
  /// ID of the solar system this customs office is located in
  #[serde(rename = "system_id")]
  system_id: i32,
  /// terrible_standing_tax_rate number
  #[serde(rename = "terrible_standing_tax_rate")]
  terrible_standing_tax_rate: Option<f32>
}

impl GetCorporationsCorporationIdCustomsOffices200Ok {
  /// 200 ok object
  pub fn new(allow_access_with_standings: bool, allow_alliance_access: bool, office_id: i64, reinforce_exit_end: i32, reinforce_exit_start: i32, system_id: i32) -> GetCorporationsCorporationIdCustomsOffices200Ok {
    GetCorporationsCorporationIdCustomsOffices200Ok {
      alliance_tax_rate: None,
      allow_access_with_standings: allow_access_with_standings,
      allow_alliance_access: allow_alliance_access,
      bad_standing_tax_rate: None,
      corporation_tax_rate: None,
      excellent_standing_tax_rate: None,
      good_standing_tax_rate: None,
      neutral_standing_tax_rate: None,
      office_id: office_id,
      reinforce_exit_end: reinforce_exit_end,
      reinforce_exit_start: reinforce_exit_start,
      standing_level: None,
      system_id: system_id,
      terrible_standing_tax_rate: None
    }
  }

  pub fn set_alliance_tax_rate(&mut self, alliance_tax_rate: f32) {
    self.alliance_tax_rate = Some(alliance_tax_rate);
  }

  pub fn with_alliance_tax_rate(mut self, alliance_tax_rate: f32) -> GetCorporationsCorporationIdCustomsOffices200Ok {
    self.alliance_tax_rate = Some(alliance_tax_rate);
    self
  }

  pub fn alliance_tax_rate(&self) -> Option<&f32> {
    self.alliance_tax_rate.as_ref()
  }

  pub fn reset_alliance_tax_rate(&mut self) {
    self.alliance_tax_rate = None;
  }

  pub fn set_allow_access_with_standings(&mut self, allow_access_with_standings: bool) {
    self.allow_access_with_standings = allow_access_with_standings;
  }

  pub fn with_allow_access_with_standings(mut self, allow_access_with_standings: bool) -> GetCorporationsCorporationIdCustomsOffices200Ok {
    self.allow_access_with_standings = allow_access_with_standings;
    self
  }

  pub fn allow_access_with_standings(&self) -> &bool {
    &self.allow_access_with_standings
  }


  pub fn set_allow_alliance_access(&mut self, allow_alliance_access: bool) {
    self.allow_alliance_access = allow_alliance_access;
  }

  pub fn with_allow_alliance_access(mut self, allow_alliance_access: bool) -> GetCorporationsCorporationIdCustomsOffices200Ok {
    self.allow_alliance_access = allow_alliance_access;
    self
  }

  pub fn allow_alliance_access(&self) -> &bool {
    &self.allow_alliance_access
  }


  pub fn set_bad_standing_tax_rate(&mut self, bad_standing_tax_rate: f32) {
    self.bad_standing_tax_rate = Some(bad_standing_tax_rate);
  }

  pub fn with_bad_standing_tax_rate(mut self, bad_standing_tax_rate: f32) -> GetCorporationsCorporationIdCustomsOffices200Ok {
    self.bad_standing_tax_rate = Some(bad_standing_tax_rate);
    self
  }

  pub fn bad_standing_tax_rate(&self) -> Option<&f32> {
    self.bad_standing_tax_rate.as_ref()
  }

  pub fn reset_bad_standing_tax_rate(&mut self) {
    self.bad_standing_tax_rate = None;
  }

  pub fn set_corporation_tax_rate(&mut self, corporation_tax_rate: f32) {
    self.corporation_tax_rate = Some(corporation_tax_rate);
  }

  pub fn with_corporation_tax_rate(mut self, corporation_tax_rate: f32) -> GetCorporationsCorporationIdCustomsOffices200Ok {
    self.corporation_tax_rate = Some(corporation_tax_rate);
    self
  }

  pub fn corporation_tax_rate(&self) -> Option<&f32> {
    self.corporation_tax_rate.as_ref()
  }

  pub fn reset_corporation_tax_rate(&mut self) {
    self.corporation_tax_rate = None;
  }

  pub fn set_excellent_standing_tax_rate(&mut self, excellent_standing_tax_rate: f32) {
    self.excellent_standing_tax_rate = Some(excellent_standing_tax_rate);
  }

  pub fn with_excellent_standing_tax_rate(mut self, excellent_standing_tax_rate: f32) -> GetCorporationsCorporationIdCustomsOffices200Ok {
    self.excellent_standing_tax_rate = Some(excellent_standing_tax_rate);
    self
  }

  pub fn excellent_standing_tax_rate(&self) -> Option<&f32> {
    self.excellent_standing_tax_rate.as_ref()
  }

  pub fn reset_excellent_standing_tax_rate(&mut self) {
    self.excellent_standing_tax_rate = None;
  }

  pub fn set_good_standing_tax_rate(&mut self, good_standing_tax_rate: f32) {
    self.good_standing_tax_rate = Some(good_standing_tax_rate);
  }

  pub fn with_good_standing_tax_rate(mut self, good_standing_tax_rate: f32) -> GetCorporationsCorporationIdCustomsOffices200Ok {
    self.good_standing_tax_rate = Some(good_standing_tax_rate);
    self
  }

  pub fn good_standing_tax_rate(&self) -> Option<&f32> {
    self.good_standing_tax_rate.as_ref()
  }

  pub fn reset_good_standing_tax_rate(&mut self) {
    self.good_standing_tax_rate = None;
  }

  pub fn set_neutral_standing_tax_rate(&mut self, neutral_standing_tax_rate: f32) {
    self.neutral_standing_tax_rate = Some(neutral_standing_tax_rate);
  }

  pub fn with_neutral_standing_tax_rate(mut self, neutral_standing_tax_rate: f32) -> GetCorporationsCorporationIdCustomsOffices200Ok {
    self.neutral_standing_tax_rate = Some(neutral_standing_tax_rate);
    self
  }

  pub fn neutral_standing_tax_rate(&self) -> Option<&f32> {
    self.neutral_standing_tax_rate.as_ref()
  }

  pub fn reset_neutral_standing_tax_rate(&mut self) {
    self.neutral_standing_tax_rate = None;
  }

  pub fn set_office_id(&mut self, office_id: i64) {
    self.office_id = office_id;
  }

  pub fn with_office_id(mut self, office_id: i64) -> GetCorporationsCorporationIdCustomsOffices200Ok {
    self.office_id = office_id;
    self
  }

  pub fn office_id(&self) -> &i64 {
    &self.office_id
  }


  pub fn set_reinforce_exit_end(&mut self, reinforce_exit_end: i32) {
    self.reinforce_exit_end = reinforce_exit_end;
  }

  pub fn with_reinforce_exit_end(mut self, reinforce_exit_end: i32) -> GetCorporationsCorporationIdCustomsOffices200Ok {
    self.reinforce_exit_end = reinforce_exit_end;
    self
  }

  pub fn reinforce_exit_end(&self) -> &i32 {
    &self.reinforce_exit_end
  }


  pub fn set_reinforce_exit_start(&mut self, reinforce_exit_start: i32) {
    self.reinforce_exit_start = reinforce_exit_start;
  }

  pub fn with_reinforce_exit_start(mut self, reinforce_exit_start: i32) -> GetCorporationsCorporationIdCustomsOffices200Ok {
    self.reinforce_exit_start = reinforce_exit_start;
    self
  }

  pub fn reinforce_exit_start(&self) -> &i32 {
    &self.reinforce_exit_start
  }


  pub fn set_standing_level(&mut self, standing_level: String) {
    self.standing_level = Some(standing_level);
  }

  pub fn with_standing_level(mut self, standing_level: String) -> GetCorporationsCorporationIdCustomsOffices200Ok {
    self.standing_level = Some(standing_level);
    self
  }

  pub fn standing_level(&self) -> Option<&String> {
    self.standing_level.as_ref()
  }

  pub fn reset_standing_level(&mut self) {
    self.standing_level = None;
  }

  pub fn set_system_id(&mut self, system_id: i32) {
    self.system_id = system_id;
  }

  pub fn with_system_id(mut self, system_id: i32) -> GetCorporationsCorporationIdCustomsOffices200Ok {
    self.system_id = system_id;
    self
  }

  pub fn system_id(&self) -> &i32 {
    &self.system_id
  }


  pub fn set_terrible_standing_tax_rate(&mut self, terrible_standing_tax_rate: f32) {
    self.terrible_standing_tax_rate = Some(terrible_standing_tax_rate);
  }

  pub fn with_terrible_standing_tax_rate(mut self, terrible_standing_tax_rate: f32) -> GetCorporationsCorporationIdCustomsOffices200Ok {
    self.terrible_standing_tax_rate = Some(terrible_standing_tax_rate);
    self
  }

  pub fn terrible_standing_tax_rate(&self) -> Option<&f32> {
    self.terrible_standing_tax_rate.as_ref()
  }

  pub fn reset_terrible_standing_tax_rate(&mut self) {
    self.terrible_standing_tax_rate = None;
  }

}



