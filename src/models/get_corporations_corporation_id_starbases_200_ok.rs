/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCorporationsCorporationIdStarbases200Ok : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCorporationsCorporationIdStarbases200Ok {
  /// The moon this starbase (POS) is anchored on, unanchored POSes do not have this information
  #[serde(rename = "moon_id")]
  moon_id: Option<i32>,
  /// When the POS onlined, for starbases (POSes) in online state
  #[serde(rename = "onlined_since")]
  onlined_since: Option<String>,
  /// When the POS will be out of reinforcement, for starbases (POSes) in reinforced state
  #[serde(rename = "reinforced_until")]
  reinforced_until: Option<String>,
  /// Unique ID for this starbase (POS)
  #[serde(rename = "starbase_id")]
  starbase_id: i64,
  /// state string
  #[serde(rename = "state")]
  state: Option<String>,
  /// The solar system this starbase (POS) is in, unanchored POSes have this information
  #[serde(rename = "system_id")]
  system_id: i32,
  /// Starbase (POS) type
  #[serde(rename = "type_id")]
  type_id: i32,
  /// When the POS started unanchoring, for starbases (POSes) in unanchoring state
  #[serde(rename = "unanchor_at")]
  unanchor_at: Option<String>
}

impl GetCorporationsCorporationIdStarbases200Ok {
  /// 200 ok object
  pub fn new(starbase_id: i64, system_id: i32, type_id: i32) -> GetCorporationsCorporationIdStarbases200Ok {
    GetCorporationsCorporationIdStarbases200Ok {
      moon_id: None,
      onlined_since: None,
      reinforced_until: None,
      starbase_id: starbase_id,
      state: None,
      system_id: system_id,
      type_id: type_id,
      unanchor_at: None
    }
  }

  pub fn set_moon_id(&mut self, moon_id: i32) {
    self.moon_id = Some(moon_id);
  }

  pub fn with_moon_id(mut self, moon_id: i32) -> GetCorporationsCorporationIdStarbases200Ok {
    self.moon_id = Some(moon_id);
    self
  }

  pub fn moon_id(&self) -> Option<&i32> {
    self.moon_id.as_ref()
  }

  pub fn reset_moon_id(&mut self) {
    self.moon_id = None;
  }

  pub fn set_onlined_since(&mut self, onlined_since: String) {
    self.onlined_since = Some(onlined_since);
  }

  pub fn with_onlined_since(mut self, onlined_since: String) -> GetCorporationsCorporationIdStarbases200Ok {
    self.onlined_since = Some(onlined_since);
    self
  }

  pub fn onlined_since(&self) -> Option<&String> {
    self.onlined_since.as_ref()
  }

  pub fn reset_onlined_since(&mut self) {
    self.onlined_since = None;
  }

  pub fn set_reinforced_until(&mut self, reinforced_until: String) {
    self.reinforced_until = Some(reinforced_until);
  }

  pub fn with_reinforced_until(mut self, reinforced_until: String) -> GetCorporationsCorporationIdStarbases200Ok {
    self.reinforced_until = Some(reinforced_until);
    self
  }

  pub fn reinforced_until(&self) -> Option<&String> {
    self.reinforced_until.as_ref()
  }

  pub fn reset_reinforced_until(&mut self) {
    self.reinforced_until = None;
  }

  pub fn set_starbase_id(&mut self, starbase_id: i64) {
    self.starbase_id = starbase_id;
  }

  pub fn with_starbase_id(mut self, starbase_id: i64) -> GetCorporationsCorporationIdStarbases200Ok {
    self.starbase_id = starbase_id;
    self
  }

  pub fn starbase_id(&self) -> &i64 {
    &self.starbase_id
  }


  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> GetCorporationsCorporationIdStarbases200Ok {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_system_id(&mut self, system_id: i32) {
    self.system_id = system_id;
  }

  pub fn with_system_id(mut self, system_id: i32) -> GetCorporationsCorporationIdStarbases200Ok {
    self.system_id = system_id;
    self
  }

  pub fn system_id(&self) -> &i32 {
    &self.system_id
  }


  pub fn set_type_id(&mut self, type_id: i32) {
    self.type_id = type_id;
  }

  pub fn with_type_id(mut self, type_id: i32) -> GetCorporationsCorporationIdStarbases200Ok {
    self.type_id = type_id;
    self
  }

  pub fn type_id(&self) -> &i32 {
    &self.type_id
  }


  pub fn set_unanchor_at(&mut self, unanchor_at: String) {
    self.unanchor_at = Some(unanchor_at);
  }

  pub fn with_unanchor_at(mut self, unanchor_at: String) -> GetCorporationsCorporationIdStarbases200Ok {
    self.unanchor_at = Some(unanchor_at);
    self
  }

  pub fn unanchor_at(&self) -> Option<&String> {
    self.unanchor_at.as_ref()
  }

  pub fn reset_unanchor_at(&mut self) {
    self.unanchor_at = None;
  }

}



