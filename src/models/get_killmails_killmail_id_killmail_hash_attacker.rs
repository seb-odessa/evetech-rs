/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetKillmailsKillmailIdKillmailHashAttacker : attacker object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetKillmailsKillmailIdKillmailHashAttacker {
  /// alliance_id integer
  #[serde(rename = "alliance_id")]
  alliance_id: Option<i32>,
  /// character_id integer
  #[serde(rename = "character_id")]
  character_id: Option<i32>,
  /// corporation_id integer
  #[serde(rename = "corporation_id")]
  corporation_id: Option<i32>,
  /// damage_done integer
  #[serde(rename = "damage_done")]
  damage_done: i32,
  /// faction_id integer
  #[serde(rename = "faction_id")]
  faction_id: Option<i32>,
  /// Was the attacker the one to achieve the final blow 
  #[serde(rename = "final_blow")]
  final_blow: bool,
  /// Security status for the attacker 
  #[serde(rename = "security_status")]
  security_status: f32,
  /// What ship was the attacker flying 
  #[serde(rename = "ship_type_id")]
  ship_type_id: Option<i32>,
  /// What weapon was used by the attacker for the kill 
  #[serde(rename = "weapon_type_id")]
  weapon_type_id: Option<i32>
}

impl GetKillmailsKillmailIdKillmailHashAttacker {
  /// attacker object
  pub fn new(damage_done: i32, final_blow: bool, security_status: f32) -> GetKillmailsKillmailIdKillmailHashAttacker {
    GetKillmailsKillmailIdKillmailHashAttacker {
      alliance_id: None,
      character_id: None,
      corporation_id: None,
      damage_done: damage_done,
      faction_id: None,
      final_blow: final_blow,
      security_status: security_status,
      ship_type_id: None,
      weapon_type_id: None
    }
  }

  pub fn set_alliance_id(&mut self, alliance_id: i32) {
    self.alliance_id = Some(alliance_id);
  }

  pub fn with_alliance_id(mut self, alliance_id: i32) -> GetKillmailsKillmailIdKillmailHashAttacker {
    self.alliance_id = Some(alliance_id);
    self
  }

  pub fn alliance_id(&self) -> Option<&i32> {
    self.alliance_id.as_ref()
  }

  pub fn reset_alliance_id(&mut self) {
    self.alliance_id = None;
  }

  pub fn set_character_id(&mut self, character_id: i32) {
    self.character_id = Some(character_id);
  }

  pub fn with_character_id(mut self, character_id: i32) -> GetKillmailsKillmailIdKillmailHashAttacker {
    self.character_id = Some(character_id);
    self
  }

  pub fn character_id(&self) -> Option<&i32> {
    self.character_id.as_ref()
  }

  pub fn reset_character_id(&mut self) {
    self.character_id = None;
  }

  pub fn set_corporation_id(&mut self, corporation_id: i32) {
    self.corporation_id = Some(corporation_id);
  }

  pub fn with_corporation_id(mut self, corporation_id: i32) -> GetKillmailsKillmailIdKillmailHashAttacker {
    self.corporation_id = Some(corporation_id);
    self
  }

  pub fn corporation_id(&self) -> Option<&i32> {
    self.corporation_id.as_ref()
  }

  pub fn reset_corporation_id(&mut self) {
    self.corporation_id = None;
  }

  pub fn set_damage_done(&mut self, damage_done: i32) {
    self.damage_done = damage_done;
  }

  pub fn with_damage_done(mut self, damage_done: i32) -> GetKillmailsKillmailIdKillmailHashAttacker {
    self.damage_done = damage_done;
    self
  }

  pub fn damage_done(&self) -> &i32 {
    &self.damage_done
  }


  pub fn set_faction_id(&mut self, faction_id: i32) {
    self.faction_id = Some(faction_id);
  }

  pub fn with_faction_id(mut self, faction_id: i32) -> GetKillmailsKillmailIdKillmailHashAttacker {
    self.faction_id = Some(faction_id);
    self
  }

  pub fn faction_id(&self) -> Option<&i32> {
    self.faction_id.as_ref()
  }

  pub fn reset_faction_id(&mut self) {
    self.faction_id = None;
  }

  pub fn set_final_blow(&mut self, final_blow: bool) {
    self.final_blow = final_blow;
  }

  pub fn with_final_blow(mut self, final_blow: bool) -> GetKillmailsKillmailIdKillmailHashAttacker {
    self.final_blow = final_blow;
    self
  }

  pub fn final_blow(&self) -> &bool {
    &self.final_blow
  }


  pub fn set_security_status(&mut self, security_status: f32) {
    self.security_status = security_status;
  }

  pub fn with_security_status(mut self, security_status: f32) -> GetKillmailsKillmailIdKillmailHashAttacker {
    self.security_status = security_status;
    self
  }

  pub fn security_status(&self) -> &f32 {
    &self.security_status
  }


  pub fn set_ship_type_id(&mut self, ship_type_id: i32) {
    self.ship_type_id = Some(ship_type_id);
  }

  pub fn with_ship_type_id(mut self, ship_type_id: i32) -> GetKillmailsKillmailIdKillmailHashAttacker {
    self.ship_type_id = Some(ship_type_id);
    self
  }

  pub fn ship_type_id(&self) -> Option<&i32> {
    self.ship_type_id.as_ref()
  }

  pub fn reset_ship_type_id(&mut self) {
    self.ship_type_id = None;
  }

  pub fn set_weapon_type_id(&mut self, weapon_type_id: i32) {
    self.weapon_type_id = Some(weapon_type_id);
  }

  pub fn with_weapon_type_id(mut self, weapon_type_id: i32) -> GetKillmailsKillmailIdKillmailHashAttacker {
    self.weapon_type_id = Some(weapon_type_id);
    self
  }

  pub fn weapon_type_id(&self) -> Option<&i32> {
    self.weapon_type_id.as_ref()
  }

  pub fn reset_weapon_type_id(&mut self) {
    self.weapon_type_id = None;
  }

}



