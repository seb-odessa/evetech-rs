/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetUniverseGroupsGroupIdOk : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetUniverseGroupsGroupIdOk {
  /// category_id integer
  #[serde(rename = "category_id")]
  category_id: i32,
  /// group_id integer
  #[serde(rename = "group_id")]
  group_id: i32,
  /// name string
  #[serde(rename = "name")]
  name: String,
  /// published boolean
  #[serde(rename = "published")]
  published: bool,
  /// types array
  #[serde(rename = "types")]
  types: Vec<i32>
}

impl GetUniverseGroupsGroupIdOk {
  /// 200 ok object
  pub fn new(category_id: i32, group_id: i32, name: String, published: bool, types: Vec<i32>) -> GetUniverseGroupsGroupIdOk {
    GetUniverseGroupsGroupIdOk {
      category_id: category_id,
      group_id: group_id,
      name: name,
      published: published,
      types: types
    }
  }

  pub fn set_category_id(&mut self, category_id: i32) {
    self.category_id = category_id;
  }

  pub fn with_category_id(mut self, category_id: i32) -> GetUniverseGroupsGroupIdOk {
    self.category_id = category_id;
    self
  }

  pub fn category_id(&self) -> &i32 {
    &self.category_id
  }


  pub fn set_group_id(&mut self, group_id: i32) {
    self.group_id = group_id;
  }

  pub fn with_group_id(mut self, group_id: i32) -> GetUniverseGroupsGroupIdOk {
    self.group_id = group_id;
    self
  }

  pub fn group_id(&self) -> &i32 {
    &self.group_id
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> GetUniverseGroupsGroupIdOk {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_published(&mut self, published: bool) {
    self.published = published;
  }

  pub fn with_published(mut self, published: bool) -> GetUniverseGroupsGroupIdOk {
    self.published = published;
    self
  }

  pub fn published(&self) -> &bool {
    &self.published
  }


  pub fn set_types(&mut self, types: Vec<i32>) {
    self.types = types;
  }

  pub fn with_types(mut self, types: Vec<i32>) -> GetUniverseGroupsGroupIdOk {
    self.types = types;
    self
  }

  pub fn types(&self) -> &Vec<i32> {
    &self.types
  }


}



