/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCorporationsCorporationIdBookmarks200Ok : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCorporationsCorporationIdBookmarks200Ok {
  /// bookmark_id integer
  #[serde(rename = "bookmark_id")]
  bookmark_id: i32,
  #[serde(rename = "coordinates")]
  coordinates: Option<::models::GetCorporationsCorporationIdBookmarksCoordinates>,
  /// created string
  #[serde(rename = "created")]
  created: String,
  /// creator_id integer
  #[serde(rename = "creator_id")]
  creator_id: i32,
  /// folder_id integer
  #[serde(rename = "folder_id")]
  folder_id: Option<i32>,
  #[serde(rename = "item")]
  item: Option<::models::GetCorporationsCorporationIdBookmarksItem>,
  /// label string
  #[serde(rename = "label")]
  label: String,
  /// location_id integer
  #[serde(rename = "location_id")]
  location_id: i32,
  /// notes string
  #[serde(rename = "notes")]
  notes: String
}

impl GetCorporationsCorporationIdBookmarks200Ok {
  /// 200 ok object
  pub fn new(bookmark_id: i32, created: String, creator_id: i32, label: String, location_id: i32, notes: String) -> GetCorporationsCorporationIdBookmarks200Ok {
    GetCorporationsCorporationIdBookmarks200Ok {
      bookmark_id: bookmark_id,
      coordinates: None,
      created: created,
      creator_id: creator_id,
      folder_id: None,
      item: None,
      label: label,
      location_id: location_id,
      notes: notes
    }
  }

  pub fn set_bookmark_id(&mut self, bookmark_id: i32) {
    self.bookmark_id = bookmark_id;
  }

  pub fn with_bookmark_id(mut self, bookmark_id: i32) -> GetCorporationsCorporationIdBookmarks200Ok {
    self.bookmark_id = bookmark_id;
    self
  }

  pub fn bookmark_id(&self) -> &i32 {
    &self.bookmark_id
  }


  pub fn set_coordinates(&mut self, coordinates: ::models::GetCorporationsCorporationIdBookmarksCoordinates) {
    self.coordinates = Some(coordinates);
  }

  pub fn with_coordinates(mut self, coordinates: ::models::GetCorporationsCorporationIdBookmarksCoordinates) -> GetCorporationsCorporationIdBookmarks200Ok {
    self.coordinates = Some(coordinates);
    self
  }

  pub fn coordinates(&self) -> Option<&::models::GetCorporationsCorporationIdBookmarksCoordinates> {
    self.coordinates.as_ref()
  }

  pub fn reset_coordinates(&mut self) {
    self.coordinates = None;
  }

  pub fn set_created(&mut self, created: String) {
    self.created = created;
  }

  pub fn with_created(mut self, created: String) -> GetCorporationsCorporationIdBookmarks200Ok {
    self.created = created;
    self
  }

  pub fn created(&self) -> &String {
    &self.created
  }


  pub fn set_creator_id(&mut self, creator_id: i32) {
    self.creator_id = creator_id;
  }

  pub fn with_creator_id(mut self, creator_id: i32) -> GetCorporationsCorporationIdBookmarks200Ok {
    self.creator_id = creator_id;
    self
  }

  pub fn creator_id(&self) -> &i32 {
    &self.creator_id
  }


  pub fn set_folder_id(&mut self, folder_id: i32) {
    self.folder_id = Some(folder_id);
  }

  pub fn with_folder_id(mut self, folder_id: i32) -> GetCorporationsCorporationIdBookmarks200Ok {
    self.folder_id = Some(folder_id);
    self
  }

  pub fn folder_id(&self) -> Option<&i32> {
    self.folder_id.as_ref()
  }

  pub fn reset_folder_id(&mut self) {
    self.folder_id = None;
  }

  pub fn set_item(&mut self, item: ::models::GetCorporationsCorporationIdBookmarksItem) {
    self.item = Some(item);
  }

  pub fn with_item(mut self, item: ::models::GetCorporationsCorporationIdBookmarksItem) -> GetCorporationsCorporationIdBookmarks200Ok {
    self.item = Some(item);
    self
  }

  pub fn item(&self) -> Option<&::models::GetCorporationsCorporationIdBookmarksItem> {
    self.item.as_ref()
  }

  pub fn reset_item(&mut self) {
    self.item = None;
  }

  pub fn set_label(&mut self, label: String) {
    self.label = label;
  }

  pub fn with_label(mut self, label: String) -> GetCorporationsCorporationIdBookmarks200Ok {
    self.label = label;
    self
  }

  pub fn label(&self) -> &String {
    &self.label
  }


  pub fn set_location_id(&mut self, location_id: i32) {
    self.location_id = location_id;
  }

  pub fn with_location_id(mut self, location_id: i32) -> GetCorporationsCorporationIdBookmarks200Ok {
    self.location_id = location_id;
    self
  }

  pub fn location_id(&self) -> &i32 {
    &self.location_id
  }


  pub fn set_notes(&mut self, notes: String) {
    self.notes = notes;
  }

  pub fn with_notes(mut self, notes: String) -> GetCorporationsCorporationIdBookmarks200Ok {
    self.notes = notes;
    self
  }

  pub fn notes(&self) -> &String {
    &self.notes
  }


}



