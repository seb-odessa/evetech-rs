/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCharactersCharacterIdPlanetsPlanetIdRoute : route object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCharactersCharacterIdPlanetsPlanetIdRoute {
  /// content_type_id integer
  #[serde(rename = "content_type_id")]
  content_type_id: i32,
  /// destination_pin_id integer
  #[serde(rename = "destination_pin_id")]
  destination_pin_id: i64,
  /// quantity number
  #[serde(rename = "quantity")]
  quantity: f32,
  /// route_id integer
  #[serde(rename = "route_id")]
  route_id: i64,
  /// source_pin_id integer
  #[serde(rename = "source_pin_id")]
  source_pin_id: i64,
  /// list of pin ID waypoints
  #[serde(rename = "waypoints")]
  waypoints: Option<Vec<i64>>
}

impl GetCharactersCharacterIdPlanetsPlanetIdRoute {
  /// route object
  pub fn new(content_type_id: i32, destination_pin_id: i64, quantity: f32, route_id: i64, source_pin_id: i64) -> GetCharactersCharacterIdPlanetsPlanetIdRoute {
    GetCharactersCharacterIdPlanetsPlanetIdRoute {
      content_type_id: content_type_id,
      destination_pin_id: destination_pin_id,
      quantity: quantity,
      route_id: route_id,
      source_pin_id: source_pin_id,
      waypoints: None
    }
  }

  pub fn set_content_type_id(&mut self, content_type_id: i32) {
    self.content_type_id = content_type_id;
  }

  pub fn with_content_type_id(mut self, content_type_id: i32) -> GetCharactersCharacterIdPlanetsPlanetIdRoute {
    self.content_type_id = content_type_id;
    self
  }

  pub fn content_type_id(&self) -> &i32 {
    &self.content_type_id
  }


  pub fn set_destination_pin_id(&mut self, destination_pin_id: i64) {
    self.destination_pin_id = destination_pin_id;
  }

  pub fn with_destination_pin_id(mut self, destination_pin_id: i64) -> GetCharactersCharacterIdPlanetsPlanetIdRoute {
    self.destination_pin_id = destination_pin_id;
    self
  }

  pub fn destination_pin_id(&self) -> &i64 {
    &self.destination_pin_id
  }


  pub fn set_quantity(&mut self, quantity: f32) {
    self.quantity = quantity;
  }

  pub fn with_quantity(mut self, quantity: f32) -> GetCharactersCharacterIdPlanetsPlanetIdRoute {
    self.quantity = quantity;
    self
  }

  pub fn quantity(&self) -> &f32 {
    &self.quantity
  }


  pub fn set_route_id(&mut self, route_id: i64) {
    self.route_id = route_id;
  }

  pub fn with_route_id(mut self, route_id: i64) -> GetCharactersCharacterIdPlanetsPlanetIdRoute {
    self.route_id = route_id;
    self
  }

  pub fn route_id(&self) -> &i64 {
    &self.route_id
  }


  pub fn set_source_pin_id(&mut self, source_pin_id: i64) {
    self.source_pin_id = source_pin_id;
  }

  pub fn with_source_pin_id(mut self, source_pin_id: i64) -> GetCharactersCharacterIdPlanetsPlanetIdRoute {
    self.source_pin_id = source_pin_id;
    self
  }

  pub fn source_pin_id(&self) -> &i64 {
    &self.source_pin_id
  }


  pub fn set_waypoints(&mut self, waypoints: Vec<i64>) {
    self.waypoints = Some(waypoints);
  }

  pub fn with_waypoints(mut self, waypoints: Vec<i64>) -> GetCharactersCharacterIdPlanetsPlanetIdRoute {
    self.waypoints = Some(waypoints);
    self
  }

  pub fn waypoints(&self) -> Option<&Vec<i64>> {
    self.waypoints.as_ref()
  }

  pub fn reset_waypoints(&mut self) {
    self.waypoints = None;
  }

}



