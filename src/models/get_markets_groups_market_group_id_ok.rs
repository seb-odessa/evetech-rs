/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetMarketsGroupsMarketGroupIdOk : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetMarketsGroupsMarketGroupIdOk {
  /// description string
  #[serde(rename = "description")]
  description: String,
  /// market_group_id integer
  #[serde(rename = "market_group_id")]
  market_group_id: i32,
  /// name string
  #[serde(rename = "name")]
  name: String,
  /// parent_group_id integer
  #[serde(rename = "parent_group_id")]
  parent_group_id: Option<i32>,
  /// types array
  #[serde(rename = "types")]
  types: Vec<i32>
}

impl GetMarketsGroupsMarketGroupIdOk {
  /// 200 ok object
  pub fn new(description: String, market_group_id: i32, name: String, types: Vec<i32>) -> GetMarketsGroupsMarketGroupIdOk {
    GetMarketsGroupsMarketGroupIdOk {
      description: description,
      market_group_id: market_group_id,
      name: name,
      parent_group_id: None,
      types: types
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = description;
  }

  pub fn with_description(mut self, description: String) -> GetMarketsGroupsMarketGroupIdOk {
    self.description = description;
    self
  }

  pub fn description(&self) -> &String {
    &self.description
  }


  pub fn set_market_group_id(&mut self, market_group_id: i32) {
    self.market_group_id = market_group_id;
  }

  pub fn with_market_group_id(mut self, market_group_id: i32) -> GetMarketsGroupsMarketGroupIdOk {
    self.market_group_id = market_group_id;
    self
  }

  pub fn market_group_id(&self) -> &i32 {
    &self.market_group_id
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> GetMarketsGroupsMarketGroupIdOk {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_parent_group_id(&mut self, parent_group_id: i32) {
    self.parent_group_id = Some(parent_group_id);
  }

  pub fn with_parent_group_id(mut self, parent_group_id: i32) -> GetMarketsGroupsMarketGroupIdOk {
    self.parent_group_id = Some(parent_group_id);
    self
  }

  pub fn parent_group_id(&self) -> Option<&i32> {
    self.parent_group_id.as_ref()
  }

  pub fn reset_parent_group_id(&mut self) {
    self.parent_group_id = None;
  }

  pub fn set_types(&mut self, types: Vec<i32>) {
    self.types = types;
  }

  pub fn with_types(mut self, types: Vec<i32>) -> GetMarketsGroupsMarketGroupIdOk {
    self.types = types;
    self
  }

  pub fn types(&self) -> &Vec<i32> {
    &self.types
  }


}



