/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails : extractor_details object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails {
  /// in seconds
  #[serde(rename = "cycle_time")]
  cycle_time: Option<i32>,
  /// head_radius number
  #[serde(rename = "head_radius")]
  head_radius: Option<f32>,
  /// heads array
  #[serde(rename = "heads")]
  heads: Vec<::models::GetCharactersCharacterIdPlanetsPlanetIdHead>,
  /// product_type_id integer
  #[serde(rename = "product_type_id")]
  product_type_id: Option<i32>,
  /// qty_per_cycle integer
  #[serde(rename = "qty_per_cycle")]
  qty_per_cycle: Option<i32>
}

impl GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails {
  /// extractor_details object
  pub fn new(heads: Vec<::models::GetCharactersCharacterIdPlanetsPlanetIdHead>) -> GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails {
    GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails {
      cycle_time: None,
      head_radius: None,
      heads: heads,
      product_type_id: None,
      qty_per_cycle: None
    }
  }

  pub fn set_cycle_time(&mut self, cycle_time: i32) {
    self.cycle_time = Some(cycle_time);
  }

  pub fn with_cycle_time(mut self, cycle_time: i32) -> GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails {
    self.cycle_time = Some(cycle_time);
    self
  }

  pub fn cycle_time(&self) -> Option<&i32> {
    self.cycle_time.as_ref()
  }

  pub fn reset_cycle_time(&mut self) {
    self.cycle_time = None;
  }

  pub fn set_head_radius(&mut self, head_radius: f32) {
    self.head_radius = Some(head_radius);
  }

  pub fn with_head_radius(mut self, head_radius: f32) -> GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails {
    self.head_radius = Some(head_radius);
    self
  }

  pub fn head_radius(&self) -> Option<&f32> {
    self.head_radius.as_ref()
  }

  pub fn reset_head_radius(&mut self) {
    self.head_radius = None;
  }

  pub fn set_heads(&mut self, heads: Vec<::models::GetCharactersCharacterIdPlanetsPlanetIdHead>) {
    self.heads = heads;
  }

  pub fn with_heads(mut self, heads: Vec<::models::GetCharactersCharacterIdPlanetsPlanetIdHead>) -> GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails {
    self.heads = heads;
    self
  }

  pub fn heads(&self) -> &Vec<::models::GetCharactersCharacterIdPlanetsPlanetIdHead> {
    &self.heads
  }


  pub fn set_product_type_id(&mut self, product_type_id: i32) {
    self.product_type_id = Some(product_type_id);
  }

  pub fn with_product_type_id(mut self, product_type_id: i32) -> GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails {
    self.product_type_id = Some(product_type_id);
    self
  }

  pub fn product_type_id(&self) -> Option<&i32> {
    self.product_type_id.as_ref()
  }

  pub fn reset_product_type_id(&mut self) {
    self.product_type_id = None;
  }

  pub fn set_qty_per_cycle(&mut self, qty_per_cycle: i32) {
    self.qty_per_cycle = Some(qty_per_cycle);
  }

  pub fn with_qty_per_cycle(mut self, qty_per_cycle: i32) -> GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails {
    self.qty_per_cycle = Some(qty_per_cycle);
    self
  }

  pub fn qty_per_cycle(&self) -> Option<&i32> {
    self.qty_per_cycle.as_ref()
  }

  pub fn reset_qty_per_cycle(&mut self) {
    self.qty_per_cycle = None;
  }

}



