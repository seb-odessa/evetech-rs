/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PostCharactersCharacterIdMailMail : mail object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PostCharactersCharacterIdMailMail {
  /// approved_cost integer
  #[serde(rename = "approved_cost")]
  approved_cost: Option<i64>,
  /// body string
  #[serde(rename = "body")]
  body: String,
  /// recipients array
  #[serde(rename = "recipients")]
  recipients: Vec<::models::PostCharactersCharacterIdMailRecipient>,
  /// subject string
  #[serde(rename = "subject")]
  subject: String
}

impl PostCharactersCharacterIdMailMail {
  /// mail object
  pub fn new(body: String, recipients: Vec<::models::PostCharactersCharacterIdMailRecipient>, subject: String) -> PostCharactersCharacterIdMailMail {
    PostCharactersCharacterIdMailMail {
      approved_cost: None,
      body: body,
      recipients: recipients,
      subject: subject
    }
  }

  pub fn set_approved_cost(&mut self, approved_cost: i64) {
    self.approved_cost = Some(approved_cost);
  }

  pub fn with_approved_cost(mut self, approved_cost: i64) -> PostCharactersCharacterIdMailMail {
    self.approved_cost = Some(approved_cost);
    self
  }

  pub fn approved_cost(&self) -> Option<&i64> {
    self.approved_cost.as_ref()
  }

  pub fn reset_approved_cost(&mut self) {
    self.approved_cost = None;
  }

  pub fn set_body(&mut self, body: String) {
    self.body = body;
  }

  pub fn with_body(mut self, body: String) -> PostCharactersCharacterIdMailMail {
    self.body = body;
    self
  }

  pub fn body(&self) -> &String {
    &self.body
  }


  pub fn set_recipients(&mut self, recipients: Vec<::models::PostCharactersCharacterIdMailRecipient>) {
    self.recipients = recipients;
  }

  pub fn with_recipients(mut self, recipients: Vec<::models::PostCharactersCharacterIdMailRecipient>) -> PostCharactersCharacterIdMailMail {
    self.recipients = recipients;
    self
  }

  pub fn recipients(&self) -> &Vec<::models::PostCharactersCharacterIdMailRecipient> {
    &self.recipients
  }


  pub fn set_subject(&mut self, subject: String) {
    self.subject = subject;
  }

  pub fn with_subject(mut self, subject: String) -> PostCharactersCharacterIdMailMail {
    self.subject = subject;
    self
  }

  pub fn subject(&self) -> &String {
    &self.subject
  }


}



