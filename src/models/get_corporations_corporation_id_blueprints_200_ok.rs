/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCorporationsCorporationIdBlueprints200Ok : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCorporationsCorporationIdBlueprints200Ok {
  /// Unique ID for this item.
  #[serde(rename = "item_id")]
  item_id: i64,
  /// Type of the location_id
  #[serde(rename = "location_flag")]
  location_flag: String,
  /// References a station, a ship or an item_id if this blueprint is located within a container.
  #[serde(rename = "location_id")]
  location_id: i64,
  /// Material Efficiency Level of the blueprint.
  #[serde(rename = "material_efficiency")]
  material_efficiency: i32,
  /// A range of numbers with a minimum of -2 and no maximum value where -1 is an original and -2 is a copy. It can be a positive integer if it is a stack of blueprint originals fresh from the market (e.g. no activities performed on them yet).
  #[serde(rename = "quantity")]
  quantity: i32,
  /// Number of runs remaining if the blueprint is a copy, -1 if it is an original.
  #[serde(rename = "runs")]
  runs: i32,
  /// Time Efficiency Level of the blueprint.
  #[serde(rename = "time_efficiency")]
  time_efficiency: i32,
  /// type_id integer
  #[serde(rename = "type_id")]
  type_id: i32
}

impl GetCorporationsCorporationIdBlueprints200Ok {
  /// 200 ok object
  pub fn new(item_id: i64, location_flag: String, location_id: i64, material_efficiency: i32, quantity: i32, runs: i32, time_efficiency: i32, type_id: i32) -> GetCorporationsCorporationIdBlueprints200Ok {
    GetCorporationsCorporationIdBlueprints200Ok {
      item_id: item_id,
      location_flag: location_flag,
      location_id: location_id,
      material_efficiency: material_efficiency,
      quantity: quantity,
      runs: runs,
      time_efficiency: time_efficiency,
      type_id: type_id
    }
  }

  pub fn set_item_id(&mut self, item_id: i64) {
    self.item_id = item_id;
  }

  pub fn with_item_id(mut self, item_id: i64) -> GetCorporationsCorporationIdBlueprints200Ok {
    self.item_id = item_id;
    self
  }

  pub fn item_id(&self) -> &i64 {
    &self.item_id
  }


  pub fn set_location_flag(&mut self, location_flag: String) {
    self.location_flag = location_flag;
  }

  pub fn with_location_flag(mut self, location_flag: String) -> GetCorporationsCorporationIdBlueprints200Ok {
    self.location_flag = location_flag;
    self
  }

  pub fn location_flag(&self) -> &String {
    &self.location_flag
  }


  pub fn set_location_id(&mut self, location_id: i64) {
    self.location_id = location_id;
  }

  pub fn with_location_id(mut self, location_id: i64) -> GetCorporationsCorporationIdBlueprints200Ok {
    self.location_id = location_id;
    self
  }

  pub fn location_id(&self) -> &i64 {
    &self.location_id
  }


  pub fn set_material_efficiency(&mut self, material_efficiency: i32) {
    self.material_efficiency = material_efficiency;
  }

  pub fn with_material_efficiency(mut self, material_efficiency: i32) -> GetCorporationsCorporationIdBlueprints200Ok {
    self.material_efficiency = material_efficiency;
    self
  }

  pub fn material_efficiency(&self) -> &i32 {
    &self.material_efficiency
  }


  pub fn set_quantity(&mut self, quantity: i32) {
    self.quantity = quantity;
  }

  pub fn with_quantity(mut self, quantity: i32) -> GetCorporationsCorporationIdBlueprints200Ok {
    self.quantity = quantity;
    self
  }

  pub fn quantity(&self) -> &i32 {
    &self.quantity
  }


  pub fn set_runs(&mut self, runs: i32) {
    self.runs = runs;
  }

  pub fn with_runs(mut self, runs: i32) -> GetCorporationsCorporationIdBlueprints200Ok {
    self.runs = runs;
    self
  }

  pub fn runs(&self) -> &i32 {
    &self.runs
  }


  pub fn set_time_efficiency(&mut self, time_efficiency: i32) {
    self.time_efficiency = time_efficiency;
  }

  pub fn with_time_efficiency(mut self, time_efficiency: i32) -> GetCorporationsCorporationIdBlueprints200Ok {
    self.time_efficiency = time_efficiency;
    self
  }

  pub fn time_efficiency(&self) -> &i32 {
    &self.time_efficiency
  }


  pub fn set_type_id(&mut self, type_id: i32) {
    self.type_id = type_id;
  }

  pub fn with_type_id(mut self, type_id: i32) -> GetCorporationsCorporationIdBlueprints200Ok {
    self.type_id = type_id;
    self
  }

  pub fn type_id(&self) -> &i32 {
    &self.type_id
  }


}



