/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetFwSystems200Ok : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetFwSystems200Ok {
  /// contested string
  #[serde(rename = "contested")]
  contested: String,
  /// occupier_faction_id integer
  #[serde(rename = "occupier_faction_id")]
  occupier_faction_id: i32,
  /// owner_faction_id integer
  #[serde(rename = "owner_faction_id")]
  owner_faction_id: i32,
  /// solar_system_id integer
  #[serde(rename = "solar_system_id")]
  solar_system_id: i32,
  /// victory_points integer
  #[serde(rename = "victory_points")]
  victory_points: i32,
  /// victory_points_threshold integer
  #[serde(rename = "victory_points_threshold")]
  victory_points_threshold: i32
}

impl GetFwSystems200Ok {
  /// 200 ok object
  pub fn new(contested: String, occupier_faction_id: i32, owner_faction_id: i32, solar_system_id: i32, victory_points: i32, victory_points_threshold: i32) -> GetFwSystems200Ok {
    GetFwSystems200Ok {
      contested: contested,
      occupier_faction_id: occupier_faction_id,
      owner_faction_id: owner_faction_id,
      solar_system_id: solar_system_id,
      victory_points: victory_points,
      victory_points_threshold: victory_points_threshold
    }
  }

  pub fn set_contested(&mut self, contested: String) {
    self.contested = contested;
  }

  pub fn with_contested(mut self, contested: String) -> GetFwSystems200Ok {
    self.contested = contested;
    self
  }

  pub fn contested(&self) -> &String {
    &self.contested
  }


  pub fn set_occupier_faction_id(&mut self, occupier_faction_id: i32) {
    self.occupier_faction_id = occupier_faction_id;
  }

  pub fn with_occupier_faction_id(mut self, occupier_faction_id: i32) -> GetFwSystems200Ok {
    self.occupier_faction_id = occupier_faction_id;
    self
  }

  pub fn occupier_faction_id(&self) -> &i32 {
    &self.occupier_faction_id
  }


  pub fn set_owner_faction_id(&mut self, owner_faction_id: i32) {
    self.owner_faction_id = owner_faction_id;
  }

  pub fn with_owner_faction_id(mut self, owner_faction_id: i32) -> GetFwSystems200Ok {
    self.owner_faction_id = owner_faction_id;
    self
  }

  pub fn owner_faction_id(&self) -> &i32 {
    &self.owner_faction_id
  }


  pub fn set_solar_system_id(&mut self, solar_system_id: i32) {
    self.solar_system_id = solar_system_id;
  }

  pub fn with_solar_system_id(mut self, solar_system_id: i32) -> GetFwSystems200Ok {
    self.solar_system_id = solar_system_id;
    self
  }

  pub fn solar_system_id(&self) -> &i32 {
    &self.solar_system_id
  }


  pub fn set_victory_points(&mut self, victory_points: i32) {
    self.victory_points = victory_points;
  }

  pub fn with_victory_points(mut self, victory_points: i32) -> GetFwSystems200Ok {
    self.victory_points = victory_points;
    self
  }

  pub fn victory_points(&self) -> &i32 {
    &self.victory_points
  }


  pub fn set_victory_points_threshold(&mut self, victory_points_threshold: i32) {
    self.victory_points_threshold = victory_points_threshold;
  }

  pub fn with_victory_points_threshold(mut self, victory_points_threshold: i32) -> GetFwSystems200Ok {
    self.victory_points_threshold = victory_points_threshold;
    self
  }

  pub fn victory_points_threshold(&self) -> &i32 {
    &self.victory_points_threshold
  }


}



