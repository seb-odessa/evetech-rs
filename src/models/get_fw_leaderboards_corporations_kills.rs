/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetFwLeaderboardsCorporationsKills : Top 10 rankings of corporations by number of kills from yesterday, last week and in total

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetFwLeaderboardsCorporationsKills {
  /// Top 10 ranking of corporations active in faction warfare by total kills. A corporation is considered \"active\" if they have participated in faction warfare in the past 14 days
  #[serde(rename = "active_total")]
  active_total: Vec<::models::GetFwLeaderboardsCorporationsActiveTotalActiveTotal>,
  /// Top 10 ranking of corporations by kills in the past week
  #[serde(rename = "last_week")]
  last_week: Vec<::models::GetFwLeaderboardsCorporationsLastWeekLastWeek>,
  /// Top 10 ranking of corporations by kills in the past day
  #[serde(rename = "yesterday")]
  yesterday: Vec<::models::GetFwLeaderboardsCorporationsYesterdayYesterday>
}

impl GetFwLeaderboardsCorporationsKills {
  /// Top 10 rankings of corporations by number of kills from yesterday, last week and in total
  pub fn new(active_total: Vec<::models::GetFwLeaderboardsCorporationsActiveTotalActiveTotal>, last_week: Vec<::models::GetFwLeaderboardsCorporationsLastWeekLastWeek>, yesterday: Vec<::models::GetFwLeaderboardsCorporationsYesterdayYesterday>) -> GetFwLeaderboardsCorporationsKills {
    GetFwLeaderboardsCorporationsKills {
      active_total: active_total,
      last_week: last_week,
      yesterday: yesterday
    }
  }

  pub fn set_active_total(&mut self, active_total: Vec<::models::GetFwLeaderboardsCorporationsActiveTotalActiveTotal>) {
    self.active_total = active_total;
  }

  pub fn with_active_total(mut self, active_total: Vec<::models::GetFwLeaderboardsCorporationsActiveTotalActiveTotal>) -> GetFwLeaderboardsCorporationsKills {
    self.active_total = active_total;
    self
  }

  pub fn active_total(&self) -> &Vec<::models::GetFwLeaderboardsCorporationsActiveTotalActiveTotal> {
    &self.active_total
  }


  pub fn set_last_week(&mut self, last_week: Vec<::models::GetFwLeaderboardsCorporationsLastWeekLastWeek>) {
    self.last_week = last_week;
  }

  pub fn with_last_week(mut self, last_week: Vec<::models::GetFwLeaderboardsCorporationsLastWeekLastWeek>) -> GetFwLeaderboardsCorporationsKills {
    self.last_week = last_week;
    self
  }

  pub fn last_week(&self) -> &Vec<::models::GetFwLeaderboardsCorporationsLastWeekLastWeek> {
    &self.last_week
  }


  pub fn set_yesterday(&mut self, yesterday: Vec<::models::GetFwLeaderboardsCorporationsYesterdayYesterday>) {
    self.yesterday = yesterday;
  }

  pub fn with_yesterday(mut self, yesterday: Vec<::models::GetFwLeaderboardsCorporationsYesterdayYesterday>) -> GetFwLeaderboardsCorporationsKills {
    self.yesterday = yesterday;
    self
  }

  pub fn yesterday(&self) -> &Vec<::models::GetFwLeaderboardsCorporationsYesterdayYesterday> {
    &self.yesterday
  }


}



