/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCharactersCharacterIdMedalsGraphic : graphic object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCharactersCharacterIdMedalsGraphic {
  /// color integer
  #[serde(rename = "color")]
  color: Option<i32>,
  /// graphic string
  #[serde(rename = "graphic")]
  graphic: String,
  /// layer integer
  #[serde(rename = "layer")]
  layer: i32,
  /// part integer
  #[serde(rename = "part")]
  part: i32
}

impl GetCharactersCharacterIdMedalsGraphic {
  /// graphic object
  pub fn new(graphic: String, layer: i32, part: i32) -> GetCharactersCharacterIdMedalsGraphic {
    GetCharactersCharacterIdMedalsGraphic {
      color: None,
      graphic: graphic,
      layer: layer,
      part: part
    }
  }

  pub fn set_color(&mut self, color: i32) {
    self.color = Some(color);
  }

  pub fn with_color(mut self, color: i32) -> GetCharactersCharacterIdMedalsGraphic {
    self.color = Some(color);
    self
  }

  pub fn color(&self) -> Option<&i32> {
    self.color.as_ref()
  }

  pub fn reset_color(&mut self) {
    self.color = None;
  }

  pub fn set_graphic(&mut self, graphic: String) {
    self.graphic = graphic;
  }

  pub fn with_graphic(mut self, graphic: String) -> GetCharactersCharacterIdMedalsGraphic {
    self.graphic = graphic;
    self
  }

  pub fn graphic(&self) -> &String {
    &self.graphic
  }


  pub fn set_layer(&mut self, layer: i32) {
    self.layer = layer;
  }

  pub fn with_layer(mut self, layer: i32) -> GetCharactersCharacterIdMedalsGraphic {
    self.layer = layer;
    self
  }

  pub fn layer(&self) -> &i32 {
    &self.layer
  }


  pub fn set_part(&mut self, part: i32) {
    self.part = part;
  }

  pub fn with_part(mut self, part: i32) -> GetCharactersCharacterIdMedalsGraphic {
    self.part = part;
    self
  }

  pub fn part(&self) -> &i32 {
    &self.part
  }


}



