/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetDogmaEffectsEffectIdModifier : modifier object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetDogmaEffectsEffectIdModifier {
  /// domain string
  #[serde(rename = "domain")]
  domain: Option<String>,
  /// effect_id integer
  #[serde(rename = "effect_id")]
  effect_id: Option<i32>,
  /// func string
  #[serde(rename = "func")]
  func: String,
  /// modified_attribute_id integer
  #[serde(rename = "modified_attribute_id")]
  modified_attribute_id: Option<i32>,
  /// modifying_attribute_id integer
  #[serde(rename = "modifying_attribute_id")]
  modifying_attribute_id: Option<i32>,
  /// operator integer
  #[serde(rename = "operator")]
  operator: Option<i32>
}

impl GetDogmaEffectsEffectIdModifier {
  /// modifier object
  pub fn new(func: String) -> GetDogmaEffectsEffectIdModifier {
    GetDogmaEffectsEffectIdModifier {
      domain: None,
      effect_id: None,
      func: func,
      modified_attribute_id: None,
      modifying_attribute_id: None,
      operator: None
    }
  }

  pub fn set_domain(&mut self, domain: String) {
    self.domain = Some(domain);
  }

  pub fn with_domain(mut self, domain: String) -> GetDogmaEffectsEffectIdModifier {
    self.domain = Some(domain);
    self
  }

  pub fn domain(&self) -> Option<&String> {
    self.domain.as_ref()
  }

  pub fn reset_domain(&mut self) {
    self.domain = None;
  }

  pub fn set_effect_id(&mut self, effect_id: i32) {
    self.effect_id = Some(effect_id);
  }

  pub fn with_effect_id(mut self, effect_id: i32) -> GetDogmaEffectsEffectIdModifier {
    self.effect_id = Some(effect_id);
    self
  }

  pub fn effect_id(&self) -> Option<&i32> {
    self.effect_id.as_ref()
  }

  pub fn reset_effect_id(&mut self) {
    self.effect_id = None;
  }

  pub fn set_func(&mut self, func: String) {
    self.func = func;
  }

  pub fn with_func(mut self, func: String) -> GetDogmaEffectsEffectIdModifier {
    self.func = func;
    self
  }

  pub fn func(&self) -> &String {
    &self.func
  }


  pub fn set_modified_attribute_id(&mut self, modified_attribute_id: i32) {
    self.modified_attribute_id = Some(modified_attribute_id);
  }

  pub fn with_modified_attribute_id(mut self, modified_attribute_id: i32) -> GetDogmaEffectsEffectIdModifier {
    self.modified_attribute_id = Some(modified_attribute_id);
    self
  }

  pub fn modified_attribute_id(&self) -> Option<&i32> {
    self.modified_attribute_id.as_ref()
  }

  pub fn reset_modified_attribute_id(&mut self) {
    self.modified_attribute_id = None;
  }

  pub fn set_modifying_attribute_id(&mut self, modifying_attribute_id: i32) {
    self.modifying_attribute_id = Some(modifying_attribute_id);
  }

  pub fn with_modifying_attribute_id(mut self, modifying_attribute_id: i32) -> GetDogmaEffectsEffectIdModifier {
    self.modifying_attribute_id = Some(modifying_attribute_id);
    self
  }

  pub fn modifying_attribute_id(&self) -> Option<&i32> {
    self.modifying_attribute_id.as_ref()
  }

  pub fn reset_modifying_attribute_id(&mut self) {
    self.modifying_attribute_id = None;
  }

  pub fn set_operator(&mut self, operator: i32) {
    self.operator = Some(operator);
  }

  pub fn with_operator(mut self, operator: i32) -> GetDogmaEffectsEffectIdModifier {
    self.operator = Some(operator);
    self
  }

  pub fn operator(&self) -> Option<&i32> {
    self.operator.as_ref()
  }

  pub fn reset_operator(&mut self) {
    self.operator = None;
  }

}



