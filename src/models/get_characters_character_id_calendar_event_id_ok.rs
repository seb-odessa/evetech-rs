/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCharactersCharacterIdCalendarEventIdOk : Full details of a specific event

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCharactersCharacterIdCalendarEventIdOk {
  /// date string
  #[serde(rename = "date")]
  date: String,
  /// Length in minutes
  #[serde(rename = "duration")]
  duration: i32,
  /// event_id integer
  #[serde(rename = "event_id")]
  event_id: i32,
  /// importance integer
  #[serde(rename = "importance")]
  importance: i32,
  /// owner_id integer
  #[serde(rename = "owner_id")]
  owner_id: i32,
  /// owner_name string
  #[serde(rename = "owner_name")]
  owner_name: String,
  /// owner_type string
  #[serde(rename = "owner_type")]
  owner_type: String,
  /// response string
  #[serde(rename = "response")]
  response: String,
  /// text string
  #[serde(rename = "text")]
  text: String,
  /// title string
  #[serde(rename = "title")]
  title: String
}

impl GetCharactersCharacterIdCalendarEventIdOk {
  /// Full details of a specific event
  pub fn new(date: String, duration: i32, event_id: i32, importance: i32, owner_id: i32, owner_name: String, owner_type: String, response: String, text: String, title: String) -> GetCharactersCharacterIdCalendarEventIdOk {
    GetCharactersCharacterIdCalendarEventIdOk {
      date: date,
      duration: duration,
      event_id: event_id,
      importance: importance,
      owner_id: owner_id,
      owner_name: owner_name,
      owner_type: owner_type,
      response: response,
      text: text,
      title: title
    }
  }

  pub fn set_date(&mut self, date: String) {
    self.date = date;
  }

  pub fn with_date(mut self, date: String) -> GetCharactersCharacterIdCalendarEventIdOk {
    self.date = date;
    self
  }

  pub fn date(&self) -> &String {
    &self.date
  }


  pub fn set_duration(&mut self, duration: i32) {
    self.duration = duration;
  }

  pub fn with_duration(mut self, duration: i32) -> GetCharactersCharacterIdCalendarEventIdOk {
    self.duration = duration;
    self
  }

  pub fn duration(&self) -> &i32 {
    &self.duration
  }


  pub fn set_event_id(&mut self, event_id: i32) {
    self.event_id = event_id;
  }

  pub fn with_event_id(mut self, event_id: i32) -> GetCharactersCharacterIdCalendarEventIdOk {
    self.event_id = event_id;
    self
  }

  pub fn event_id(&self) -> &i32 {
    &self.event_id
  }


  pub fn set_importance(&mut self, importance: i32) {
    self.importance = importance;
  }

  pub fn with_importance(mut self, importance: i32) -> GetCharactersCharacterIdCalendarEventIdOk {
    self.importance = importance;
    self
  }

  pub fn importance(&self) -> &i32 {
    &self.importance
  }


  pub fn set_owner_id(&mut self, owner_id: i32) {
    self.owner_id = owner_id;
  }

  pub fn with_owner_id(mut self, owner_id: i32) -> GetCharactersCharacterIdCalendarEventIdOk {
    self.owner_id = owner_id;
    self
  }

  pub fn owner_id(&self) -> &i32 {
    &self.owner_id
  }


  pub fn set_owner_name(&mut self, owner_name: String) {
    self.owner_name = owner_name;
  }

  pub fn with_owner_name(mut self, owner_name: String) -> GetCharactersCharacterIdCalendarEventIdOk {
    self.owner_name = owner_name;
    self
  }

  pub fn owner_name(&self) -> &String {
    &self.owner_name
  }


  pub fn set_owner_type(&mut self, owner_type: String) {
    self.owner_type = owner_type;
  }

  pub fn with_owner_type(mut self, owner_type: String) -> GetCharactersCharacterIdCalendarEventIdOk {
    self.owner_type = owner_type;
    self
  }

  pub fn owner_type(&self) -> &String {
    &self.owner_type
  }


  pub fn set_response(&mut self, response: String) {
    self.response = response;
  }

  pub fn with_response(mut self, response: String) -> GetCharactersCharacterIdCalendarEventIdOk {
    self.response = response;
    self
  }

  pub fn response(&self) -> &String {
    &self.response
  }


  pub fn set_text(&mut self, text: String) {
    self.text = text;
  }

  pub fn with_text(mut self, text: String) -> GetCharactersCharacterIdCalendarEventIdOk {
    self.text = text;
    self
  }

  pub fn text(&self) -> &String {
    &self.text
  }


  pub fn set_title(&mut self, title: String) {
    self.title = title;
  }

  pub fn with_title(mut self, title: String) -> GetCharactersCharacterIdCalendarEventIdOk {
    self.title = title;
    self
  }

  pub fn title(&self) -> &String {
    &self.title
  }


}



