/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetKillmailsKillmailIdKillmailHashOk : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetKillmailsKillmailIdKillmailHashOk {
  /// attackers array
  #[serde(rename = "attackers")]
  attackers: Vec<::models::GetKillmailsKillmailIdKillmailHashAttacker>,
  /// ID of the killmail
  #[serde(rename = "killmail_id")]
  killmail_id: i32,
  /// Time that the victim was killed and the killmail generated 
  #[serde(rename = "killmail_time")]
  killmail_time: String,
  /// Moon if the kill took place at one
  #[serde(rename = "moon_id")]
  moon_id: Option<i32>,
  /// Solar system that the kill took place in 
  #[serde(rename = "solar_system_id")]
  solar_system_id: i32,
  #[serde(rename = "victim")]
  victim: ::models::GetKillmailsKillmailIdKillmailHashVictim,
  /// War if the killmail is generated in relation to an official war 
  #[serde(rename = "war_id")]
  war_id: Option<i32>
}

impl GetKillmailsKillmailIdKillmailHashOk {
  /// 200 ok object
  pub fn new(attackers: Vec<::models::GetKillmailsKillmailIdKillmailHashAttacker>, killmail_id: i32, killmail_time: String, solar_system_id: i32, victim: ::models::GetKillmailsKillmailIdKillmailHashVictim) -> GetKillmailsKillmailIdKillmailHashOk {
    GetKillmailsKillmailIdKillmailHashOk {
      attackers: attackers,
      killmail_id: killmail_id,
      killmail_time: killmail_time,
      moon_id: None,
      solar_system_id: solar_system_id,
      victim: victim,
      war_id: None
    }
  }

  pub fn set_attackers(&mut self, attackers: Vec<::models::GetKillmailsKillmailIdKillmailHashAttacker>) {
    self.attackers = attackers;
  }

  pub fn with_attackers(mut self, attackers: Vec<::models::GetKillmailsKillmailIdKillmailHashAttacker>) -> GetKillmailsKillmailIdKillmailHashOk {
    self.attackers = attackers;
    self
  }

  pub fn attackers(&self) -> &Vec<::models::GetKillmailsKillmailIdKillmailHashAttacker> {
    &self.attackers
  }


  pub fn set_killmail_id(&mut self, killmail_id: i32) {
    self.killmail_id = killmail_id;
  }

  pub fn with_killmail_id(mut self, killmail_id: i32) -> GetKillmailsKillmailIdKillmailHashOk {
    self.killmail_id = killmail_id;
    self
  }

  pub fn killmail_id(&self) -> &i32 {
    &self.killmail_id
  }


  pub fn set_killmail_time(&mut self, killmail_time: String) {
    self.killmail_time = killmail_time;
  }

  pub fn with_killmail_time(mut self, killmail_time: String) -> GetKillmailsKillmailIdKillmailHashOk {
    self.killmail_time = killmail_time;
    self
  }

  pub fn killmail_time(&self) -> &String {
    &self.killmail_time
  }


  pub fn set_moon_id(&mut self, moon_id: i32) {
    self.moon_id = Some(moon_id);
  }

  pub fn with_moon_id(mut self, moon_id: i32) -> GetKillmailsKillmailIdKillmailHashOk {
    self.moon_id = Some(moon_id);
    self
  }

  pub fn moon_id(&self) -> Option<&i32> {
    self.moon_id.as_ref()
  }

  pub fn reset_moon_id(&mut self) {
    self.moon_id = None;
  }

  pub fn set_solar_system_id(&mut self, solar_system_id: i32) {
    self.solar_system_id = solar_system_id;
  }

  pub fn with_solar_system_id(mut self, solar_system_id: i32) -> GetKillmailsKillmailIdKillmailHashOk {
    self.solar_system_id = solar_system_id;
    self
  }

  pub fn solar_system_id(&self) -> &i32 {
    &self.solar_system_id
  }


  pub fn set_victim(&mut self, victim: ::models::GetKillmailsKillmailIdKillmailHashVictim) {
    self.victim = victim;
  }

  pub fn with_victim(mut self, victim: ::models::GetKillmailsKillmailIdKillmailHashVictim) -> GetKillmailsKillmailIdKillmailHashOk {
    self.victim = victim;
    self
  }

  pub fn victim(&self) -> &::models::GetKillmailsKillmailIdKillmailHashVictim {
    &self.victim
  }


  pub fn set_war_id(&mut self, war_id: i32) {
    self.war_id = Some(war_id);
  }

  pub fn with_war_id(mut self, war_id: i32) -> GetKillmailsKillmailIdKillmailHashOk {
    self.war_id = Some(war_id);
    self
  }

  pub fn war_id(&self) -> Option<&i32> {
    self.war_id.as_ref()
  }

  pub fn reset_war_id(&mut self) {
    self.war_id = None;
  }

}



