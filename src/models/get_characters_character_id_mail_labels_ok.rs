/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCharactersCharacterIdMailLabelsOk : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCharactersCharacterIdMailLabelsOk {
  /// labels array
  #[serde(rename = "labels")]
  labels: Option<Vec<::models::GetCharactersCharacterIdMailLabelsLabel>>,
  /// total_unread_count integer
  #[serde(rename = "total_unread_count")]
  total_unread_count: Option<i32>
}

impl GetCharactersCharacterIdMailLabelsOk {
  /// 200 ok object
  pub fn new() -> GetCharactersCharacterIdMailLabelsOk {
    GetCharactersCharacterIdMailLabelsOk {
      labels: None,
      total_unread_count: None
    }
  }

  pub fn set_labels(&mut self, labels: Vec<::models::GetCharactersCharacterIdMailLabelsLabel>) {
    self.labels = Some(labels);
  }

  pub fn with_labels(mut self, labels: Vec<::models::GetCharactersCharacterIdMailLabelsLabel>) -> GetCharactersCharacterIdMailLabelsOk {
    self.labels = Some(labels);
    self
  }

  pub fn labels(&self) -> Option<&Vec<::models::GetCharactersCharacterIdMailLabelsLabel>> {
    self.labels.as_ref()
  }

  pub fn reset_labels(&mut self) {
    self.labels = None;
  }

  pub fn set_total_unread_count(&mut self, total_unread_count: i32) {
    self.total_unread_count = Some(total_unread_count);
  }

  pub fn with_total_unread_count(mut self, total_unread_count: i32) -> GetCharactersCharacterIdMailLabelsOk {
    self.total_unread_count = Some(total_unread_count);
    self
  }

  pub fn total_unread_count(&self) -> Option<&i32> {
    self.total_unread_count.as_ref()
  }

  pub fn reset_total_unread_count(&mut self) {
    self.total_unread_count = None;
  }

}



