/*
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetIncursions200Ok : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetIncursions200Ok {
  /// The constellation id in which this incursion takes place
  #[serde(rename = "constellation_id")]
  constellation_id: i32,
  /// The attacking faction's id
  #[serde(rename = "faction_id")]
  faction_id: i32,
  /// Whether the final encounter has boss or not
  #[serde(rename = "has_boss")]
  has_boss: bool,
  /// A list of infested solar system ids that are a part of this incursion
  #[serde(rename = "infested_solar_systems")]
  infested_solar_systems: Vec<i32>,
  /// Influence of this incursion as a float from 0 to 1
  #[serde(rename = "influence")]
  influence: f32,
  /// Staging solar system for this incursion
  #[serde(rename = "staging_solar_system_id")]
  staging_solar_system_id: i32,
  /// The state of this incursion
  #[serde(rename = "state")]
  state: String,
  /// The type of this incursion
  #[serde(rename = "type")]
  _type: String
}

impl GetIncursions200Ok {
  /// 200 ok object
  pub fn new(constellation_id: i32, faction_id: i32, has_boss: bool, infested_solar_systems: Vec<i32>, influence: f32, staging_solar_system_id: i32, state: String, _type: String) -> GetIncursions200Ok {
    GetIncursions200Ok {
      constellation_id: constellation_id,
      faction_id: faction_id,
      has_boss: has_boss,
      infested_solar_systems: infested_solar_systems,
      influence: influence,
      staging_solar_system_id: staging_solar_system_id,
      state: state,
      _type: _type
    }
  }

  pub fn set_constellation_id(&mut self, constellation_id: i32) {
    self.constellation_id = constellation_id;
  }

  pub fn with_constellation_id(mut self, constellation_id: i32) -> GetIncursions200Ok {
    self.constellation_id = constellation_id;
    self
  }

  pub fn constellation_id(&self) -> &i32 {
    &self.constellation_id
  }


  pub fn set_faction_id(&mut self, faction_id: i32) {
    self.faction_id = faction_id;
  }

  pub fn with_faction_id(mut self, faction_id: i32) -> GetIncursions200Ok {
    self.faction_id = faction_id;
    self
  }

  pub fn faction_id(&self) -> &i32 {
    &self.faction_id
  }


  pub fn set_has_boss(&mut self, has_boss: bool) {
    self.has_boss = has_boss;
  }

  pub fn with_has_boss(mut self, has_boss: bool) -> GetIncursions200Ok {
    self.has_boss = has_boss;
    self
  }

  pub fn has_boss(&self) -> &bool {
    &self.has_boss
  }


  pub fn set_infested_solar_systems(&mut self, infested_solar_systems: Vec<i32>) {
    self.infested_solar_systems = infested_solar_systems;
  }

  pub fn with_infested_solar_systems(mut self, infested_solar_systems: Vec<i32>) -> GetIncursions200Ok {
    self.infested_solar_systems = infested_solar_systems;
    self
  }

  pub fn infested_solar_systems(&self) -> &Vec<i32> {
    &self.infested_solar_systems
  }


  pub fn set_influence(&mut self, influence: f32) {
    self.influence = influence;
  }

  pub fn with_influence(mut self, influence: f32) -> GetIncursions200Ok {
    self.influence = influence;
    self
  }

  pub fn influence(&self) -> &f32 {
    &self.influence
  }


  pub fn set_staging_solar_system_id(&mut self, staging_solar_system_id: i32) {
    self.staging_solar_system_id = staging_solar_system_id;
  }

  pub fn with_staging_solar_system_id(mut self, staging_solar_system_id: i32) -> GetIncursions200Ok {
    self.staging_solar_system_id = staging_solar_system_id;
    self
  }

  pub fn staging_solar_system_id(&self) -> &i32 {
    &self.staging_solar_system_id
  }


  pub fn set_state(&mut self, state: String) {
    self.state = state;
  }

  pub fn with_state(mut self, state: String) -> GetIncursions200Ok {
    self.state = state;
    self
  }

  pub fn state(&self) -> &String {
    &self.state
  }


  pub fn set_type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with_type(mut self, _type: String) -> GetIncursions200Ok {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


}



