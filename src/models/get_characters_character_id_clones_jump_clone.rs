/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCharactersCharacterIdClonesJumpClone : jump_clone object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCharactersCharacterIdClonesJumpClone {
  /// implants array
  #[serde(rename = "implants")]
  implants: Vec<i32>,
  /// jump_clone_id integer
  #[serde(rename = "jump_clone_id")]
  jump_clone_id: i32,
  /// location_id integer
  #[serde(rename = "location_id")]
  location_id: i64,
  /// location_type string
  #[serde(rename = "location_type")]
  location_type: String,
  /// name string
  #[serde(rename = "name")]
  name: Option<String>
}

impl GetCharactersCharacterIdClonesJumpClone {
  /// jump_clone object
  pub fn new(implants: Vec<i32>, jump_clone_id: i32, location_id: i64, location_type: String) -> GetCharactersCharacterIdClonesJumpClone {
    GetCharactersCharacterIdClonesJumpClone {
      implants: implants,
      jump_clone_id: jump_clone_id,
      location_id: location_id,
      location_type: location_type,
      name: None
    }
  }

  pub fn set_implants(&mut self, implants: Vec<i32>) {
    self.implants = implants;
  }

  pub fn with_implants(mut self, implants: Vec<i32>) -> GetCharactersCharacterIdClonesJumpClone {
    self.implants = implants;
    self
  }

  pub fn implants(&self) -> &Vec<i32> {
    &self.implants
  }


  pub fn set_jump_clone_id(&mut self, jump_clone_id: i32) {
    self.jump_clone_id = jump_clone_id;
  }

  pub fn with_jump_clone_id(mut self, jump_clone_id: i32) -> GetCharactersCharacterIdClonesJumpClone {
    self.jump_clone_id = jump_clone_id;
    self
  }

  pub fn jump_clone_id(&self) -> &i32 {
    &self.jump_clone_id
  }


  pub fn set_location_id(&mut self, location_id: i64) {
    self.location_id = location_id;
  }

  pub fn with_location_id(mut self, location_id: i64) -> GetCharactersCharacterIdClonesJumpClone {
    self.location_id = location_id;
    self
  }

  pub fn location_id(&self) -> &i64 {
    &self.location_id
  }


  pub fn set_location_type(&mut self, location_type: String) {
    self.location_type = location_type;
  }

  pub fn with_location_type(mut self, location_type: String) -> GetCharactersCharacterIdClonesJumpClone {
    self.location_type = location_type;
    self
  }

  pub fn location_type(&self) -> &String {
    &self.location_type
  }


  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> GetCharactersCharacterIdClonesJumpClone {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

}



