/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetFwStats200Ok : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetFwStats200Ok {
  /// faction_id integer
  #[serde(rename = "faction_id")]
  faction_id: i32,
  #[serde(rename = "kills")]
  kills: ::models::GetFwStatsKills,
  /// How many pilots fight for the given faction
  #[serde(rename = "pilots")]
  pilots: i32,
  /// The number of solar systems controlled by the given faction
  #[serde(rename = "systems_controlled")]
  systems_controlled: i32,
  #[serde(rename = "victory_points")]
  victory_points: ::models::GetFwStatsVictoryPoints
}

impl GetFwStats200Ok {
  /// 200 ok object
  pub fn new(faction_id: i32, kills: ::models::GetFwStatsKills, pilots: i32, systems_controlled: i32, victory_points: ::models::GetFwStatsVictoryPoints) -> GetFwStats200Ok {
    GetFwStats200Ok {
      faction_id: faction_id,
      kills: kills,
      pilots: pilots,
      systems_controlled: systems_controlled,
      victory_points: victory_points
    }
  }

  pub fn set_faction_id(&mut self, faction_id: i32) {
    self.faction_id = faction_id;
  }

  pub fn with_faction_id(mut self, faction_id: i32) -> GetFwStats200Ok {
    self.faction_id = faction_id;
    self
  }

  pub fn faction_id(&self) -> &i32 {
    &self.faction_id
  }


  pub fn set_kills(&mut self, kills: ::models::GetFwStatsKills) {
    self.kills = kills;
  }

  pub fn with_kills(mut self, kills: ::models::GetFwStatsKills) -> GetFwStats200Ok {
    self.kills = kills;
    self
  }

  pub fn kills(&self) -> &::models::GetFwStatsKills {
    &self.kills
  }


  pub fn set_pilots(&mut self, pilots: i32) {
    self.pilots = pilots;
  }

  pub fn with_pilots(mut self, pilots: i32) -> GetFwStats200Ok {
    self.pilots = pilots;
    self
  }

  pub fn pilots(&self) -> &i32 {
    &self.pilots
  }


  pub fn set_systems_controlled(&mut self, systems_controlled: i32) {
    self.systems_controlled = systems_controlled;
  }

  pub fn with_systems_controlled(mut self, systems_controlled: i32) -> GetFwStats200Ok {
    self.systems_controlled = systems_controlled;
    self
  }

  pub fn systems_controlled(&self) -> &i32 {
    &self.systems_controlled
  }


  pub fn set_victory_points(&mut self, victory_points: ::models::GetFwStatsVictoryPoints) {
    self.victory_points = victory_points;
  }

  pub fn with_victory_points(mut self, victory_points: ::models::GetFwStatsVictoryPoints) -> GetFwStats200Ok {
    self.victory_points = victory_points;
    self
  }

  pub fn victory_points(&self) -> &::models::GetFwStatsVictoryPoints {
    &self.victory_points
  }


}



