/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCorporationsCorporationIdStarbasesStarbaseIdOk : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCorporationsCorporationIdStarbasesStarbaseIdOk {
  /// allow_alliance_members boolean
  #[serde(rename = "allow_alliance_members")]
  allow_alliance_members: bool,
  /// allow_corporation_members boolean
  #[serde(rename = "allow_corporation_members")]
  allow_corporation_members: bool,
  /// Who can anchor starbase (POS) and its structures
  #[serde(rename = "anchor")]
  anchor: String,
  /// attack_if_at_war boolean
  #[serde(rename = "attack_if_at_war")]
  attack_if_at_war: bool,
  /// attack_if_other_security_status_dropping boolean
  #[serde(rename = "attack_if_other_security_status_dropping")]
  attack_if_other_security_status_dropping: bool,
  /// Starbase (POS) will attack if target's security standing is lower than this value
  #[serde(rename = "attack_security_status_threshold")]
  attack_security_status_threshold: Option<f32>,
  /// Starbase (POS) will attack if target's standing is lower than this value
  #[serde(rename = "attack_standing_threshold")]
  attack_standing_threshold: Option<f32>,
  /// Who can take fuel blocks out of the starbase (POS)'s fuel bay
  #[serde(rename = "fuel_bay_take")]
  fuel_bay_take: String,
  /// Who can view the starbase (POS)'s fule bay. Characters either need to have required role or belong to the starbase (POS) owner's corporation or alliance, as described by the enum, all other access settings follows the same scheme
  #[serde(rename = "fuel_bay_view")]
  fuel_bay_view: String,
  /// Fuel blocks and other things that will be consumed when operating a starbase (POS)
  #[serde(rename = "fuels")]
  fuels: Option<Vec<::models::GetCorporationsCorporationIdStarbasesStarbaseIdFuel>>,
  /// Who can offline starbase (POS) and its structures
  #[serde(rename = "offline")]
  offline: String,
  /// Who can online starbase (POS) and its structures
  #[serde(rename = "online")]
  online: String,
  /// Who can unanchor starbase (POS) and its structures
  #[serde(rename = "unanchor")]
  unanchor: String,
  /// True if the starbase (POS) is using alliance standings, otherwise using corporation's
  #[serde(rename = "use_alliance_standings")]
  use_alliance_standings: bool
}

impl GetCorporationsCorporationIdStarbasesStarbaseIdOk {
  /// 200 ok object
  pub fn new(allow_alliance_members: bool, allow_corporation_members: bool, anchor: String, attack_if_at_war: bool, attack_if_other_security_status_dropping: bool, fuel_bay_take: String, fuel_bay_view: String, offline: String, online: String, unanchor: String, use_alliance_standings: bool) -> GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    GetCorporationsCorporationIdStarbasesStarbaseIdOk {
      allow_alliance_members: allow_alliance_members,
      allow_corporation_members: allow_corporation_members,
      anchor: anchor,
      attack_if_at_war: attack_if_at_war,
      attack_if_other_security_status_dropping: attack_if_other_security_status_dropping,
      attack_security_status_threshold: None,
      attack_standing_threshold: None,
      fuel_bay_take: fuel_bay_take,
      fuel_bay_view: fuel_bay_view,
      fuels: None,
      offline: offline,
      online: online,
      unanchor: unanchor,
      use_alliance_standings: use_alliance_standings
    }
  }

  pub fn set_allow_alliance_members(&mut self, allow_alliance_members: bool) {
    self.allow_alliance_members = allow_alliance_members;
  }

  pub fn with_allow_alliance_members(mut self, allow_alliance_members: bool) -> GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    self.allow_alliance_members = allow_alliance_members;
    self
  }

  pub fn allow_alliance_members(&self) -> &bool {
    &self.allow_alliance_members
  }


  pub fn set_allow_corporation_members(&mut self, allow_corporation_members: bool) {
    self.allow_corporation_members = allow_corporation_members;
  }

  pub fn with_allow_corporation_members(mut self, allow_corporation_members: bool) -> GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    self.allow_corporation_members = allow_corporation_members;
    self
  }

  pub fn allow_corporation_members(&self) -> &bool {
    &self.allow_corporation_members
  }


  pub fn set_anchor(&mut self, anchor: String) {
    self.anchor = anchor;
  }

  pub fn with_anchor(mut self, anchor: String) -> GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    self.anchor = anchor;
    self
  }

  pub fn anchor(&self) -> &String {
    &self.anchor
  }


  pub fn set_attack_if_at_war(&mut self, attack_if_at_war: bool) {
    self.attack_if_at_war = attack_if_at_war;
  }

  pub fn with_attack_if_at_war(mut self, attack_if_at_war: bool) -> GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    self.attack_if_at_war = attack_if_at_war;
    self
  }

  pub fn attack_if_at_war(&self) -> &bool {
    &self.attack_if_at_war
  }


  pub fn set_attack_if_other_security_status_dropping(&mut self, attack_if_other_security_status_dropping: bool) {
    self.attack_if_other_security_status_dropping = attack_if_other_security_status_dropping;
  }

  pub fn with_attack_if_other_security_status_dropping(mut self, attack_if_other_security_status_dropping: bool) -> GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    self.attack_if_other_security_status_dropping = attack_if_other_security_status_dropping;
    self
  }

  pub fn attack_if_other_security_status_dropping(&self) -> &bool {
    &self.attack_if_other_security_status_dropping
  }


  pub fn set_attack_security_status_threshold(&mut self, attack_security_status_threshold: f32) {
    self.attack_security_status_threshold = Some(attack_security_status_threshold);
  }

  pub fn with_attack_security_status_threshold(mut self, attack_security_status_threshold: f32) -> GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    self.attack_security_status_threshold = Some(attack_security_status_threshold);
    self
  }

  pub fn attack_security_status_threshold(&self) -> Option<&f32> {
    self.attack_security_status_threshold.as_ref()
  }

  pub fn reset_attack_security_status_threshold(&mut self) {
    self.attack_security_status_threshold = None;
  }

  pub fn set_attack_standing_threshold(&mut self, attack_standing_threshold: f32) {
    self.attack_standing_threshold = Some(attack_standing_threshold);
  }

  pub fn with_attack_standing_threshold(mut self, attack_standing_threshold: f32) -> GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    self.attack_standing_threshold = Some(attack_standing_threshold);
    self
  }

  pub fn attack_standing_threshold(&self) -> Option<&f32> {
    self.attack_standing_threshold.as_ref()
  }

  pub fn reset_attack_standing_threshold(&mut self) {
    self.attack_standing_threshold = None;
  }

  pub fn set_fuel_bay_take(&mut self, fuel_bay_take: String) {
    self.fuel_bay_take = fuel_bay_take;
  }

  pub fn with_fuel_bay_take(mut self, fuel_bay_take: String) -> GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    self.fuel_bay_take = fuel_bay_take;
    self
  }

  pub fn fuel_bay_take(&self) -> &String {
    &self.fuel_bay_take
  }


  pub fn set_fuel_bay_view(&mut self, fuel_bay_view: String) {
    self.fuel_bay_view = fuel_bay_view;
  }

  pub fn with_fuel_bay_view(mut self, fuel_bay_view: String) -> GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    self.fuel_bay_view = fuel_bay_view;
    self
  }

  pub fn fuel_bay_view(&self) -> &String {
    &self.fuel_bay_view
  }


  pub fn set_fuels(&mut self, fuels: Vec<::models::GetCorporationsCorporationIdStarbasesStarbaseIdFuel>) {
    self.fuels = Some(fuels);
  }

  pub fn with_fuels(mut self, fuels: Vec<::models::GetCorporationsCorporationIdStarbasesStarbaseIdFuel>) -> GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    self.fuels = Some(fuels);
    self
  }

  pub fn fuels(&self) -> Option<&Vec<::models::GetCorporationsCorporationIdStarbasesStarbaseIdFuel>> {
    self.fuels.as_ref()
  }

  pub fn reset_fuels(&mut self) {
    self.fuels = None;
  }

  pub fn set_offline(&mut self, offline: String) {
    self.offline = offline;
  }

  pub fn with_offline(mut self, offline: String) -> GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    self.offline = offline;
    self
  }

  pub fn offline(&self) -> &String {
    &self.offline
  }


  pub fn set_online(&mut self, online: String) {
    self.online = online;
  }

  pub fn with_online(mut self, online: String) -> GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    self.online = online;
    self
  }

  pub fn online(&self) -> &String {
    &self.online
  }


  pub fn set_unanchor(&mut self, unanchor: String) {
    self.unanchor = unanchor;
  }

  pub fn with_unanchor(mut self, unanchor: String) -> GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    self.unanchor = unanchor;
    self
  }

  pub fn unanchor(&self) -> &String {
    &self.unanchor
  }


  pub fn set_use_alliance_standings(&mut self, use_alliance_standings: bool) {
    self.use_alliance_standings = use_alliance_standings;
  }

  pub fn with_use_alliance_standings(mut self, use_alliance_standings: bool) -> GetCorporationsCorporationIdStarbasesStarbaseIdOk {
    self.use_alliance_standings = use_alliance_standings;
    self
  }

  pub fn use_alliance_standings(&self) -> &bool {
    &self.use_alliance_standings
  }


}



