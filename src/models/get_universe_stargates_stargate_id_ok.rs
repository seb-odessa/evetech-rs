/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetUniverseStargatesStargateIdOk : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetUniverseStargatesStargateIdOk {
  #[serde(rename = "destination")]
  destination: ::models::GetUniverseStargatesStargateIdDestination,
  /// name string
  #[serde(rename = "name")]
  name: String,
  #[serde(rename = "position")]
  position: ::models::GetUniverseStargatesStargateIdPosition,
  /// stargate_id integer
  #[serde(rename = "stargate_id")]
  stargate_id: i32,
  /// The solar system this stargate is in
  #[serde(rename = "system_id")]
  system_id: i32,
  /// type_id integer
  #[serde(rename = "type_id")]
  type_id: i32
}

impl GetUniverseStargatesStargateIdOk {
  /// 200 ok object
  pub fn new(destination: ::models::GetUniverseStargatesStargateIdDestination, name: String, position: ::models::GetUniverseStargatesStargateIdPosition, stargate_id: i32, system_id: i32, type_id: i32) -> GetUniverseStargatesStargateIdOk {
    GetUniverseStargatesStargateIdOk {
      destination: destination,
      name: name,
      position: position,
      stargate_id: stargate_id,
      system_id: system_id,
      type_id: type_id
    }
  }

  pub fn set_destination(&mut self, destination: ::models::GetUniverseStargatesStargateIdDestination) {
    self.destination = destination;
  }

  pub fn with_destination(mut self, destination: ::models::GetUniverseStargatesStargateIdDestination) -> GetUniverseStargatesStargateIdOk {
    self.destination = destination;
    self
  }

  pub fn destination(&self) -> &::models::GetUniverseStargatesStargateIdDestination {
    &self.destination
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> GetUniverseStargatesStargateIdOk {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_position(&mut self, position: ::models::GetUniverseStargatesStargateIdPosition) {
    self.position = position;
  }

  pub fn with_position(mut self, position: ::models::GetUniverseStargatesStargateIdPosition) -> GetUniverseStargatesStargateIdOk {
    self.position = position;
    self
  }

  pub fn position(&self) -> &::models::GetUniverseStargatesStargateIdPosition {
    &self.position
  }


  pub fn set_stargate_id(&mut self, stargate_id: i32) {
    self.stargate_id = stargate_id;
  }

  pub fn with_stargate_id(mut self, stargate_id: i32) -> GetUniverseStargatesStargateIdOk {
    self.stargate_id = stargate_id;
    self
  }

  pub fn stargate_id(&self) -> &i32 {
    &self.stargate_id
  }


  pub fn set_system_id(&mut self, system_id: i32) {
    self.system_id = system_id;
  }

  pub fn with_system_id(mut self, system_id: i32) -> GetUniverseStargatesStargateIdOk {
    self.system_id = system_id;
    self
  }

  pub fn system_id(&self) -> &i32 {
    &self.system_id
  }


  pub fn set_type_id(&mut self, type_id: i32) {
    self.type_id = type_id;
  }

  pub fn with_type_id(mut self, type_id: i32) -> GetUniverseStargatesStargateIdOk {
    self.type_id = type_id;
    self
  }

  pub fn type_id(&self) -> &i32 {
    &self.type_id
  }


}



