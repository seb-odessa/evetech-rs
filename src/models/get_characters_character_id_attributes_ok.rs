/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCharactersCharacterIdAttributesOk : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCharactersCharacterIdAttributesOk {
  /// Neural remapping cooldown after a character uses remap accrued over time
  #[serde(rename = "accrued_remap_cooldown_date")]
  accrued_remap_cooldown_date: Option<String>,
  /// Number of available bonus character neural remaps
  #[serde(rename = "bonus_remaps")]
  bonus_remaps: Option<i32>,
  /// charisma integer
  #[serde(rename = "charisma")]
  charisma: i32,
  /// intelligence integer
  #[serde(rename = "intelligence")]
  intelligence: i32,
  /// Datetime of last neural remap, including usage of bonus remaps
  #[serde(rename = "last_remap_date")]
  last_remap_date: Option<String>,
  /// memory integer
  #[serde(rename = "memory")]
  memory: i32,
  /// perception integer
  #[serde(rename = "perception")]
  perception: i32,
  /// willpower integer
  #[serde(rename = "willpower")]
  willpower: i32
}

impl GetCharactersCharacterIdAttributesOk {
  /// 200 ok object
  pub fn new(charisma: i32, intelligence: i32, memory: i32, perception: i32, willpower: i32) -> GetCharactersCharacterIdAttributesOk {
    GetCharactersCharacterIdAttributesOk {
      accrued_remap_cooldown_date: None,
      bonus_remaps: None,
      charisma: charisma,
      intelligence: intelligence,
      last_remap_date: None,
      memory: memory,
      perception: perception,
      willpower: willpower
    }
  }

  pub fn set_accrued_remap_cooldown_date(&mut self, accrued_remap_cooldown_date: String) {
    self.accrued_remap_cooldown_date = Some(accrued_remap_cooldown_date);
  }

  pub fn with_accrued_remap_cooldown_date(mut self, accrued_remap_cooldown_date: String) -> GetCharactersCharacterIdAttributesOk {
    self.accrued_remap_cooldown_date = Some(accrued_remap_cooldown_date);
    self
  }

  pub fn accrued_remap_cooldown_date(&self) -> Option<&String> {
    self.accrued_remap_cooldown_date.as_ref()
  }

  pub fn reset_accrued_remap_cooldown_date(&mut self) {
    self.accrued_remap_cooldown_date = None;
  }

  pub fn set_bonus_remaps(&mut self, bonus_remaps: i32) {
    self.bonus_remaps = Some(bonus_remaps);
  }

  pub fn with_bonus_remaps(mut self, bonus_remaps: i32) -> GetCharactersCharacterIdAttributesOk {
    self.bonus_remaps = Some(bonus_remaps);
    self
  }

  pub fn bonus_remaps(&self) -> Option<&i32> {
    self.bonus_remaps.as_ref()
  }

  pub fn reset_bonus_remaps(&mut self) {
    self.bonus_remaps = None;
  }

  pub fn set_charisma(&mut self, charisma: i32) {
    self.charisma = charisma;
  }

  pub fn with_charisma(mut self, charisma: i32) -> GetCharactersCharacterIdAttributesOk {
    self.charisma = charisma;
    self
  }

  pub fn charisma(&self) -> &i32 {
    &self.charisma
  }


  pub fn set_intelligence(&mut self, intelligence: i32) {
    self.intelligence = intelligence;
  }

  pub fn with_intelligence(mut self, intelligence: i32) -> GetCharactersCharacterIdAttributesOk {
    self.intelligence = intelligence;
    self
  }

  pub fn intelligence(&self) -> &i32 {
    &self.intelligence
  }


  pub fn set_last_remap_date(&mut self, last_remap_date: String) {
    self.last_remap_date = Some(last_remap_date);
  }

  pub fn with_last_remap_date(mut self, last_remap_date: String) -> GetCharactersCharacterIdAttributesOk {
    self.last_remap_date = Some(last_remap_date);
    self
  }

  pub fn last_remap_date(&self) -> Option<&String> {
    self.last_remap_date.as_ref()
  }

  pub fn reset_last_remap_date(&mut self) {
    self.last_remap_date = None;
  }

  pub fn set_memory(&mut self, memory: i32) {
    self.memory = memory;
  }

  pub fn with_memory(mut self, memory: i32) -> GetCharactersCharacterIdAttributesOk {
    self.memory = memory;
    self
  }

  pub fn memory(&self) -> &i32 {
    &self.memory
  }


  pub fn set_perception(&mut self, perception: i32) {
    self.perception = perception;
  }

  pub fn with_perception(mut self, perception: i32) -> GetCharactersCharacterIdAttributesOk {
    self.perception = perception;
    self
  }

  pub fn perception(&self) -> &i32 {
    &self.perception
  }


  pub fn set_willpower(&mut self, willpower: i32) {
    self.willpower = willpower;
  }

  pub fn with_willpower(mut self, willpower: i32) -> GetCharactersCharacterIdAttributesOk {
    self.willpower = willpower;
    self
  }

  pub fn willpower(&self) -> &i32 {
    &self.willpower
  }


}



