/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetWarsWarIdOk : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetWarsWarIdOk {
  #[serde(rename = "aggressor")]
  aggressor: ::models::GetWarsWarIdAggressor,
  /// allied corporations or alliances, each object contains either corporation_id or alliance_id
  #[serde(rename = "allies")]
  allies: Option<Vec<::models::GetWarsWarIdAlly>>,
  /// Time that the war was declared
  #[serde(rename = "declared")]
  declared: String,
  #[serde(rename = "defender")]
  defender: ::models::GetWarsWarIdDefender,
  /// Time the war ended and shooting was no longer allowed
  #[serde(rename = "finished")]
  finished: Option<String>,
  /// ID of the specified war
  #[serde(rename = "id")]
  id: i32,
  /// Was the war declared mutual by both parties
  #[serde(rename = "mutual")]
  mutual: bool,
  /// Is the war currently open for allies or not
  #[serde(rename = "open_for_allies")]
  open_for_allies: bool,
  /// Time the war was retracted but both sides could still shoot each other
  #[serde(rename = "retracted")]
  retracted: Option<String>,
  /// Time when the war started and both sides could shoot each other
  #[serde(rename = "started")]
  started: Option<String>
}

impl GetWarsWarIdOk {
  /// 200 ok object
  pub fn new(aggressor: ::models::GetWarsWarIdAggressor, declared: String, defender: ::models::GetWarsWarIdDefender, id: i32, mutual: bool, open_for_allies: bool) -> GetWarsWarIdOk {
    GetWarsWarIdOk {
      aggressor: aggressor,
      allies: None,
      declared: declared,
      defender: defender,
      finished: None,
      id: id,
      mutual: mutual,
      open_for_allies: open_for_allies,
      retracted: None,
      started: None
    }
  }

  pub fn set_aggressor(&mut self, aggressor: ::models::GetWarsWarIdAggressor) {
    self.aggressor = aggressor;
  }

  pub fn with_aggressor(mut self, aggressor: ::models::GetWarsWarIdAggressor) -> GetWarsWarIdOk {
    self.aggressor = aggressor;
    self
  }

  pub fn aggressor(&self) -> &::models::GetWarsWarIdAggressor {
    &self.aggressor
  }


  pub fn set_allies(&mut self, allies: Vec<::models::GetWarsWarIdAlly>) {
    self.allies = Some(allies);
  }

  pub fn with_allies(mut self, allies: Vec<::models::GetWarsWarIdAlly>) -> GetWarsWarIdOk {
    self.allies = Some(allies);
    self
  }

  pub fn allies(&self) -> Option<&Vec<::models::GetWarsWarIdAlly>> {
    self.allies.as_ref()
  }

  pub fn reset_allies(&mut self) {
    self.allies = None;
  }

  pub fn set_declared(&mut self, declared: String) {
    self.declared = declared;
  }

  pub fn with_declared(mut self, declared: String) -> GetWarsWarIdOk {
    self.declared = declared;
    self
  }

  pub fn declared(&self) -> &String {
    &self.declared
  }


  pub fn set_defender(&mut self, defender: ::models::GetWarsWarIdDefender) {
    self.defender = defender;
  }

  pub fn with_defender(mut self, defender: ::models::GetWarsWarIdDefender) -> GetWarsWarIdOk {
    self.defender = defender;
    self
  }

  pub fn defender(&self) -> &::models::GetWarsWarIdDefender {
    &self.defender
  }


  pub fn set_finished(&mut self, finished: String) {
    self.finished = Some(finished);
  }

  pub fn with_finished(mut self, finished: String) -> GetWarsWarIdOk {
    self.finished = Some(finished);
    self
  }

  pub fn finished(&self) -> Option<&String> {
    self.finished.as_ref()
  }

  pub fn reset_finished(&mut self) {
    self.finished = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = id;
  }

  pub fn with_id(mut self, id: i32) -> GetWarsWarIdOk {
    self.id = id;
    self
  }

  pub fn id(&self) -> &i32 {
    &self.id
  }


  pub fn set_mutual(&mut self, mutual: bool) {
    self.mutual = mutual;
  }

  pub fn with_mutual(mut self, mutual: bool) -> GetWarsWarIdOk {
    self.mutual = mutual;
    self
  }

  pub fn mutual(&self) -> &bool {
    &self.mutual
  }


  pub fn set_open_for_allies(&mut self, open_for_allies: bool) {
    self.open_for_allies = open_for_allies;
  }

  pub fn with_open_for_allies(mut self, open_for_allies: bool) -> GetWarsWarIdOk {
    self.open_for_allies = open_for_allies;
    self
  }

  pub fn open_for_allies(&self) -> &bool {
    &self.open_for_allies
  }


  pub fn set_retracted(&mut self, retracted: String) {
    self.retracted = Some(retracted);
  }

  pub fn with_retracted(mut self, retracted: String) -> GetWarsWarIdOk {
    self.retracted = Some(retracted);
    self
  }

  pub fn retracted(&self) -> Option<&String> {
    self.retracted.as_ref()
  }

  pub fn reset_retracted(&mut self) {
    self.retracted = None;
  }

  pub fn set_started(&mut self, started: String) {
    self.started = Some(started);
  }

  pub fn with_started(mut self, started: String) -> GetWarsWarIdOk {
    self.started = Some(started);
    self
  }

  pub fn started(&self) -> Option<&String> {
    self.started.as_ref()
  }

  pub fn reset_started(&mut self) {
    self.started = None;
  }

}



